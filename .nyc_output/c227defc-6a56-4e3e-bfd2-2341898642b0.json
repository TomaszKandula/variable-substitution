{"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/envVariableUtility.ts":{"path":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/envVariableUtility.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":125}},"2":{"start":{"line":5,"column":30},"end":{"line":5,"column":88}},"3":{"start":{"line":6,"column":4},"end":{"line":10,"column":5}},"4":{"start":{"line":7,"column":8},"end":{"line":9,"column":9}},"5":{"start":{"line":8,"column":12},"end":{"line":8,"column":24}},"6":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"7":{"start":{"line":13,"column":0},"end":{"line":13,"column":52}},"8":{"start":{"line":15,"column":22},"end":{"line":15,"column":31}},"9":{"start":{"line":16,"column":20},"end":{"line":16,"column":31}},"10":{"start":{"line":17,"column":4},"end":{"line":21,"column":7}},"11":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"12":{"start":{"line":19,"column":12},"end":{"line":19,"column":49}},"13":{"start":{"line":22,"column":4},"end":{"line":22,"column":23}},"14":{"start":{"line":24,"column":0},"end":{"line":24,"column":40}},"15":{"start":{"line":26,"column":4},"end":{"line":27,"column":20}},"16":{"start":{"line":27,"column":8},"end":{"line":27,"column":20}},"17":{"start":{"line":28,"column":4},"end":{"line":28,"column":17}},"18":{"start":{"line":30,"column":0},"end":{"line":30,"column":26}},"19":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"20":{"start":{"line":33,"column":8},"end":{"line":33,"column":21}},"21":{"start":{"line":35,"column":4},"end":{"line":35,"column":16}},"22":{"start":{"line":37,"column":0},"end":{"line":37,"column":28}},"23":{"start":{"line":40,"column":8},"end":{"line":40,"column":31}},"24":{"start":{"line":43,"column":19},"end":{"line":43,"column":39}},"25":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"26":{"start":{"line":45,"column":12},"end":{"line":45,"column":67}},"27":{"start":{"line":47,"column":8},"end":{"line":47,"column":31}},"28":{"start":{"line":52,"column":25},"end":{"line":58,"column":9}},"29":{"start":{"line":59,"column":8},"end":{"line":74,"column":9}},"30":{"start":{"line":60,"column":37},"end":{"line":60,"column":47}},"31":{"start":{"line":61,"column":39},"end":{"line":61,"column":53}},"32":{"start":{"line":62,"column":12},"end":{"line":71,"column":13}},"33":{"start":{"line":63,"column":16},"end":{"line":69,"column":17}},"34":{"start":{"line":64,"column":20},"end":{"line":68,"column":22}},"35":{"start":{"line":70,"column":16},"end":{"line":70,"column":76}},"36":{"start":{"line":72,"column":12},"end":{"line":72,"column":44}},"37":{"start":{"line":73,"column":12},"end":{"line":73,"column":45}},"38":{"start":{"line":75,"column":8},"end":{"line":75,"column":26}},"39":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"40":{"start":{"line":79,"column":12},"end":{"line":79,"column":30}},"41":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"42":{"start":{"line":82,"column":12},"end":{"line":82,"column":29}},"43":{"start":{"line":84,"column":8},"end":{"line":84,"column":124}},"44":{"start":{"line":87,"column":0},"end":{"line":87,"column":40}}},"fnMap":{"0":{"name":"isPredefinedVariable","decl":{"start":{"line":4,"column":9},"end":{"line":4,"column":29}},"loc":{"start":{"line":4,"column":40},"end":{"line":12,"column":1}},"line":4},"1":{"name":"getVariableMap","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":23}},"loc":{"start":{"line":14,"column":26},"end":{"line":23,"column":1}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":35},"end":{"line":17,"column":36}},"loc":{"start":{"line":17,"column":42},"end":{"line":21,"column":5}},"line":17},"3":{"name":"isEmpty","decl":{"start":{"line":25,"column":9},"end":{"line":25,"column":16}},"loc":{"start":{"line":25,"column":25},"end":{"line":29,"column":1}},"line":25},"4":{"name":"isObject","decl":{"start":{"line":31,"column":9},"end":{"line":31,"column":17}},"loc":{"start":{"line":31,"column":26},"end":{"line":36,"column":1}},"line":31},"5":{"name":"(anonymous_5)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":18},"end":{"line":41,"column":5}},"line":39},"6":{"name":"(anonymous_6)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":27},"end":{"line":48,"column":5}},"line":42},"7":{"name":"(anonymous_7)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":32},"end":{"line":76,"column":5}},"line":49},"8":{"name":"(anonymous_8)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":76},"end":{"line":85,"column":5}},"line":77}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":8},"end":{"line":9,"column":9}},"type":"if","locations":[{"start":{"line":7,"column":8},"end":{"line":9,"column":9}},{"start":{"line":7,"column":8},"end":{"line":9,"column":9}}],"line":7},"1":{"loc":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},{"start":{"line":18,"column":8},"end":{"line":20,"column":9}}],"line":18},"2":{"loc":{"start":{"line":26,"column":4},"end":{"line":27,"column":20}},"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":27,"column":20}},{"start":{"line":26,"column":4},"end":{"line":27,"column":20}}],"line":26},"3":{"loc":{"start":{"line":26,"column":8},"end":{"line":26,"column":38}},"type":"binary-expr","locations":[{"start":{"line":26,"column":8},"end":{"line":26,"column":22}},{"start":{"line":26,"column":26},"end":{"line":26,"column":38}}],"line":26},"4":{"loc":{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":34,"column":5}},{"start":{"line":32,"column":4},"end":{"line":34,"column":5}}],"line":32},"5":{"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":69}},"type":"binary-expr","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":22}},{"start":{"line":32,"column":26},"end":{"line":32,"column":38}},{"start":{"line":32,"column":42},"end":{"line":32,"column":69}}],"line":32},"6":{"loc":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},{"start":{"line":44,"column":8},"end":{"line":46,"column":9}}],"line":44},"7":{"loc":{"start":{"line":63,"column":16},"end":{"line":69,"column":17}},"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":69,"column":17}},{"start":{"line":63,"column":16},"end":{"line":69,"column":17}}],"line":63},"8":{"loc":{"start":{"line":63,"column":20},"end":{"line":63,"column":136}},"type":"binary-expr","locations":[{"start":{"line":63,"column":20},"end":{"line":63,"column":72}},{"start":{"line":63,"column":76},"end":{"line":63,"column":136}}],"line":63},"9":{"loc":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},{"start":{"line":78,"column":8},"end":{"line":80,"column":9}}],"line":78},"10":{"loc":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},{"start":{"line":81,"column":8},"end":{"line":83,"column":9}}],"line":81},"11":{"loc":{"start":{"line":81,"column":12},"end":{"line":81,"column":128}},"type":"binary-expr","locations":[{"start":{"line":81,"column":12},"end":{"line":81,"column":64}},{"start":{"line":81,"column":68},"end":{"line":81,"column":128}}],"line":81}},"s":{"0":1,"1":1,"2":219,"3":219,"4":876,"5":1,"6":218,"7":1,"8":3,"9":3,"10":3,"11":204,"12":204,"13":3,"14":1,"15":68,"16":4,"17":64,"18":1,"19":175,"20":68,"21":107,"22":1,"23":5,"24":2,"25":2,"26":2,"27":2,"28":2,"29":2,"30":136,"31":136,"32":136,"33":136,"34":136,"35":136,"36":136,"37":136,"38":2,"39":47,"40":17,"41":30,"42":10,"43":20,"44":1},"f":{"0":219,"1":3,"2":204,"3":68,"4":175,"5":5,"6":2,"7":2,"8":47},"b":{"0":[1,875],"1":[204,0],"2":[4,64],"3":[68,64],"4":[68,107],"5":[175,175,175],"6":[2,0],"7":[136,0],"8":[136,0],"9":[17,30],"10":[10,20],"11":[30,20]},"inputSourceMap":{"version":3,"file":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/envVariableUtility.ts","sources":["/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/envVariableUtility.ts"],"names":[],"mappings":"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","sourcesContent":["export function isPredefinedVariable(variable: string): boolean {\r\n    let predefinedVarPrefix = ['runner.', 'azure_http_user_agent', 'common.', 'system.'];\r\n    for(let varPrefix of predefinedVarPrefix) {\r\n        if(variable.toLowerCase().startsWith(varPrefix)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getVariableMap() {\r\n    let variableMap = new Map();\r\n    let variables = process.env;\r\n    Object.keys(variables).forEach(key => {\r\n        if(!isPredefinedVariable(key)) {\r\n            variableMap.set(key, variables[key]);\r\n        }\r\n    });\r\n    return variableMap;\r\n}\r\n\r\nexport function isEmpty(object){\r\n    if(object == null || object == \"\")\r\n        return true;\r\n    return false;\r\n}\r\n\r\nexport function isObject(object){\r\n    if(object == null || object == \"\" || typeof(object) != 'object'){\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\ninterface varTreeNode {\r\n    value: any,\r\n    isEnd: boolean,\r\n    child: any\r\n}\r\n\r\nexport class EnvTreeUtility {\r\n\r\n    public static getEnvVarTree() {\r\n        let util = new EnvTreeUtility();\r\n        if(!util.envVarTree) {\r\n            util.envVarTree = util.createEnvTree(getVariableMap());\r\n        }\r\n\r\n        return util.envVarTree;\r\n    }\r\n\r\n    private createEnvTree(envVariables): varTreeNode {\r\n        // __proto__ is marked as null, so that custom object can be assgined.\r\n        // This replacement do not affect the JSON object, as no inbuilt JSON function is referenced.\r\n        let envVarTree: varTreeNode = {\r\n            value: null,\r\n            isEnd: false,\r\n            child: {\r\n                '__proto__': null\r\n            }\r\n        };\r\n        for(let [key, value] of envVariables.entries()) {\r\n            let envVarTreeIterator = envVarTree;\r\n            let envVariableNameArray = key.split('.');\r\n            \r\n            for(let variableName of envVariableNameArray) {\r\n                if(envVarTreeIterator.child[variableName] === undefined || typeof envVarTreeIterator.child[variableName] === 'function') {\r\n                    envVarTreeIterator.child[variableName] = {\r\n                        value: null,\r\n                        isEnd: false,\r\n                        child: {}\r\n                    };\r\n                }\r\n                envVarTreeIterator = envVarTreeIterator.child[variableName];\r\n            }\r\n            envVarTreeIterator.isEnd = true;\r\n            envVarTreeIterator.value = value;\r\n        }\r\n        return envVarTree;\r\n    }\r\n\r\n    checkEnvTreePath(jsonObjectKey, index, jsonObjectKeyLength, envVarTree) {\r\n        if(index == jsonObjectKeyLength) {\r\n            return envVarTree;\r\n        }\r\n        if(envVarTree.child[ jsonObjectKey[index] ] === undefined || typeof envVarTree.child[ jsonObjectKey[index] ] === 'function') {\r\n            return undefined;\r\n       }\r\n        return this.checkEnvTreePath(jsonObjectKey, index + 1, jsonObjectKeyLength, envVarTree.child[ jsonObjectKey[index] ]);\r\n    }\r\n\r\n    private envVarTree: varTreeNode = null;\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"15b84fe4bdb5220e6f4c1b4351d74cebbfdc5c75"},"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/jsonVariableSubstitutionUtility.ts":{"path":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/jsonVariableSubstitutionUtility.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":13},"end":{"line":4,"column":37}},"3":{"start":{"line":5,"column":29},"end":{"line":5,"column":60}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":69}},"5":{"start":{"line":11,"column":29},"end":{"line":11,"column":34}},"6":{"start":{"line":12,"column":8},"end":{"line":47,"column":9}},"7":{"start":{"line":13,"column":33},"end":{"line":13,"column":53}},"8":{"start":{"line":14,"column":29},"end":{"line":14,"column":115}},"9":{"start":{"line":15,"column":12},"end":{"line":46,"column":13}},"10":{"start":{"line":16,"column":16},"end":{"line":45,"column":17}},"11":{"start":{"line":17,"column":20},"end":{"line":40,"column":21}},"12":{"start":{"line":19,"column":28},"end":{"line":19,"column":105}},"13":{"start":{"line":20,"column":28},"end":{"line":20,"column":123}},"14":{"start":{"line":21,"column":28},"end":{"line":21,"column":34}},"15":{"start":{"line":23,"column":28},"end":{"line":23,"column":106}},"16":{"start":{"line":24,"column":28},"end":{"line":24,"column":147}},"17":{"start":{"line":25,"column":28},"end":{"line":25,"column":34}},"18":{"start":{"line":28,"column":28},"end":{"line":35,"column":29}},"19":{"start":{"line":29,"column":32},"end":{"line":29,"column":109}},"20":{"start":{"line":30,"column":32},"end":{"line":30,"column":85}},"21":{"start":{"line":33,"column":32},"end":{"line":33,"column":107}},"22":{"start":{"line":34,"column":32},"end":{"line":34,"column":73}},"23":{"start":{"line":36,"column":28},"end":{"line":36,"column":34}},"24":{"start":{"line":38,"column":28},"end":{"line":38,"column":105}},"25":{"start":{"line":39,"column":28},"end":{"line":39,"column":69}},"26":{"start":{"line":41,"column":20},"end":{"line":41,"column":42}},"27":{"start":{"line":44,"column":20},"end":{"line":44,"column":118}},"28":{"start":{"line":48,"column":8},"end":{"line":48,"column":30}},"29":{"start":{"line":51,"column":0},"end":{"line":51,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":18},"end":{"line":9,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":50},"end":{"line":49,"column":5}},"line":10}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":12},"end":{"line":46,"column":13}},"type":"if","locations":[{"start":{"line":15,"column":12},"end":{"line":46,"column":13}},{"start":{"line":15,"column":12},"end":{"line":46,"column":13}}],"line":15},"1":{"loc":{"start":{"line":16,"column":16},"end":{"line":45,"column":17}},"type":"if","locations":[{"start":{"line":16,"column":16},"end":{"line":45,"column":17}},{"start":{"line":16,"column":16},"end":{"line":45,"column":17}}],"line":16},"2":{"loc":{"start":{"line":17,"column":20},"end":{"line":40,"column":21}},"type":"switch","locations":[{"start":{"line":18,"column":24},"end":{"line":21,"column":34}},{"start":{"line":22,"column":24},"end":{"line":25,"column":34}},{"start":{"line":26,"column":24},"end":{"line":26,"column":38}},{"start":{"line":27,"column":24},"end":{"line":36,"column":34}},{"start":{"line":37,"column":24},"end":{"line":39,"column":69}}],"line":17},"3":{"loc":{"start":{"line":20,"column":52},"end":{"line":20,"column":122}},"type":"cond-expr","locations":[{"start":{"line":20,"column":79},"end":{"line":20,"column":103}},{"start":{"line":20,"column":106},"end":{"line":20,"column":122}}],"line":20},"4":{"loc":{"start":{"line":24,"column":53},"end":{"line":24,"column":145}},"type":"cond-expr","locations":[{"start":{"line":24,"column":82},"end":{"line":24,"column":86}},{"start":{"line":24,"column":90},"end":{"line":24,"column":144}}],"line":24},"5":{"loc":{"start":{"line":24,"column":90},"end":{"line":24,"column":144}},"type":"cond-expr","locations":[{"start":{"line":24,"column":120},"end":{"line":24,"column":125}},{"start":{"line":24,"column":128},"end":{"line":24,"column":144}}],"line":24},"6":{"loc":{"start":{"line":44,"column":37},"end":{"line":44,"column":117}},"type":"binary-expr","locations":[{"start":{"line":44,"column":37},"end":{"line":44,"column":99}},{"start":{"line":44,"column":103},"end":{"line":44,"column":117}}],"line":44}},"s":{"0":1,"1":1,"2":1,"3":1,"4":3,"5":7,"6":7,"7":27,"8":27,"9":27,"10":17,"11":13,"12":2,"13":2,"14":2,"15":1,"16":1,"17":1,"18":3,"19":3,"20":3,"21":1,"22":1,"23":3,"24":7,"25":7,"26":13,"27":4,"28":7,"29":1},"f":{"0":3,"1":7},"b":{"0":[17,10],"1":[13,4],"2":[2,1,3,3,7],"3":[2,0],"4":[0,1],"5":[1,0],"6":[4,0]},"inputSourceMap":{"version":3,"file":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/jsonVariableSubstitutionUtility.ts","sources":["/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/jsonVariableSubstitutionUtility.ts"],"names":[],"mappings":";;;AAAA,sCAAuC;AAEvC,6DAAsD;AAEtD,MAAa,gBAAgB;IACzB;QACI,IAAI,CAAC,WAAW,GAAG,IAAI,mCAAc,EAAE,CAAC;IAC5C,CAAC;IAED,sBAAsB,CAAC,UAAU,EAAE,SAAS;QACxC,IAAI,cAAc,GAAY,KAAK,CAAC;QACpC,KAAI,IAAI,SAAS,IAAI,UAAU,EAAE;YAC7B,IAAI,cAAc,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC,EAAE,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACxG,IAAG,UAAU,IAAI,SAAS,EAAE;gBACxB,IAAG,UAAU,CAAC,KAAK,EAAE;oBACjB,QAAO,OAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE;wBAClC,KAAK,QAAQ;4BACT,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,SAAS,EAAG,UAAU,CAAC,KAAK,CAAC,CAAC;4BAC9E,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC;4BAC9F,MAAM;wBACV,KAAK,SAAS;4BACV,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAG,SAAS,EAAG,UAAU,CAAC,KAAK,CAAC,CAAC;4BAChF,UAAU,CAAC,SAAS,CAAC,GAAG,CACpB,UAAU,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAC/F,CAAA;4BACD,MAAM;wBACV,KAAK,QAAQ,CAAC;wBACd,KAAK,IAAI;4BACL,IAAI;gCACA,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAG,SAAS,EAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gCAC/E,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;6BACxD;4BACD,OAAM,SAAS,EAAE;gCACb,IAAI,CAAC,KAAK,CAAC,8DAA8D,CAAC,CAAC;gCAC3E,UAAU,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;6BAC5C;4BACD,MAAM;wBACV,KAAK,QAAQ;4BACT,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAG,SAAS,EAAG,UAAU,CAAC,KAAK,CAAC,CAAC;4BAC/E,UAAU,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;qBAChD;oBACD,cAAc,GAAG,IAAI,CAAC;iBACzB;qBACI;oBACD,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,UAAU,CAAC,IAAI,cAAc,CAAC;iBACrG;aACJ;SACJ;QACD,OAAO,cAAc,CAAC;IAC1B,CAAC;CAGJ;AAjDD,4CAiDC","sourcesContent":["import core = require(\"@actions/core\");\r\n\r\nimport { EnvTreeUtility } from \"./envVariableUtility\";\r\n\r\nexport class JsonSubstitution {\r\n    constructor() {\r\n        this.envTreeUtil = new EnvTreeUtility();\r\n    }\r\n    \r\n    substituteJsonVariable(jsonObject, envObject) {\r\n        let isValueChanged: boolean = false;\r\n        for(let jsonChild in jsonObject) {\r\n            let jsonChildArray = jsonChild.split('.');\r\n            let resultNode = this.envTreeUtil.checkEnvTreePath(jsonChildArray, 0, jsonChildArray.length, envObject);\r\n            if(resultNode != undefined) {\r\n                if(resultNode.isEnd) {\r\n                    switch(typeof(jsonObject[jsonChild])) {\r\n                        case 'number':\r\n                            console.log('SubstitutingValueonKeyWithNumber', jsonChild , resultNode.value);\r\n                            jsonObject[jsonChild] = !isNaN(resultNode.value) ? Number(resultNode.value): resultNode.value;\r\n                            break;\r\n                        case 'boolean':\r\n                            console.log('SubstitutingValueonKeyWithBoolean' , jsonChild , resultNode.value);\r\n                            jsonObject[jsonChild] = (\r\n                                resultNode.value == 'true' ? true : (resultNode.value == 'false' ? false : resultNode.value)\r\n                            )\r\n                            break;\r\n                        case 'object':\r\n                        case null:\r\n                            try {\r\n                                console.log('SubstitutingValueonKeyWithObject' , jsonChild , resultNode.value);\r\n                                jsonObject[jsonChild] = JSON.parse(resultNode.value);\r\n                            }\r\n                            catch(exception) {\r\n                                core.debug('unable to substitute the value. falling back to string value');\r\n                                jsonObject[jsonChild] = resultNode.value;\r\n                            }\r\n                            break;\r\n                        case 'string':\r\n                            console.log('SubstitutingValueonKeyWithString' , jsonChild , resultNode.value);\r\n                            jsonObject[jsonChild] = resultNode.value;\r\n                    }\r\n                    isValueChanged = true;\r\n                }\r\n                else {\r\n                    isValueChanged = this.substituteJsonVariable(jsonObject[jsonChild], resultNode) || isValueChanged;\r\n                }\r\n            }\r\n        }\r\n        return isValueChanged;\r\n    }\r\n\r\n    private envTreeUtil: EnvTreeUtility;\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"be1210b320b7e7d37f2b25f8afef18e06b3631d0"},"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/variableSubstitution.ts":{"path":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/variableSubstitution.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"13":{"start":{"line":12,"column":0},"end":{"line":12,"column":38}},"14":{"start":{"line":13,"column":13},"end":{"line":13,"column":37}},"15":{"start":{"line":14,"column":29},"end":{"line":14,"column":71}},"16":{"start":{"line":15,"column":42},"end":{"line":15,"column":97}},"17":{"start":{"line":16,"column":24},"end":{"line":16,"column":61}},"18":{"start":{"line":17,"column":34},"end":{"line":17,"column":81}},"19":{"start":{"line":18,"column":18},"end":{"line":18,"column":49}},"20":{"start":{"line":19,"column":11},"end":{"line":19,"column":24}},"21":{"start":{"line":20,"column":13},"end":{"line":20,"column":31}},"22":{"start":{"line":21,"column":21},"end":{"line":21,"column":64}},"23":{"start":{"line":24,"column":8},"end":{"line":24,"column":42}},"24":{"start":{"line":25,"column":8},"end":{"line":25,"column":33}},"25":{"start":{"line":28,"column":8},"end":{"line":37,"column":11}},"26":{"start":{"line":29,"column":29},"end":{"line":29,"column":71}},"27":{"start":{"line":30,"column":24},"end":{"line":30,"column":45}},"28":{"start":{"line":31,"column":12},"end":{"line":36,"column":13}},"29":{"start":{"line":32,"column":16},"end":{"line":32,"column":56}},"30":{"start":{"line":35,"column":16},"end":{"line":35,"column":138}},"31":{"start":{"line":40,"column":36},"end":{"line":40,"column":41}},"32":{"start":{"line":41,"column":8},"end":{"line":107,"column":9}},"33":{"start":{"line":42,"column":31},"end":{"line":42,"column":63}},"34":{"start":{"line":43,"column":12},"end":{"line":46,"column":13}},"35":{"start":{"line":44,"column":16},"end":{"line":44,"column":77}},"36":{"start":{"line":45,"column":16},"end":{"line":45,"column":25}},"37":{"start":{"line":47,"column":12},"end":{"line":106,"column":13}},"38":{"start":{"line":48,"column":33},"end":{"line":48,"column":54}},"39":{"start":{"line":49,"column":37},"end":{"line":49,"column":86}},"40":{"start":{"line":50,"column":34},"end":{"line":50,"column":78}},"41":{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},"42":{"start":{"line":52,"column":20},"end":{"line":52,"column":55}},"43":{"start":{"line":54,"column":16},"end":{"line":105,"column":17}},"44":{"start":{"line":55,"column":20},"end":{"line":55,"column":88}},"45":{"start":{"line":56,"column":42},"end":{"line":56,"column":98}},"46":{"start":{"line":57,"column":37},"end":{"line":57,"column":68}},"47":{"start":{"line":58,"column":52},"end":{"line":58,"column":155}},"48":{"start":{"line":59,"column":20},"end":{"line":65,"column":21}},"49":{"start":{"line":60,"column":24},"end":{"line":60,"column":166}},"50":{"start":{"line":61,"column":24},"end":{"line":61,"column":74}},"51":{"start":{"line":64,"column":24},"end":{"line":64,"column":70}},"52":{"start":{"line":66,"column":20},"end":{"line":66,"column":95}},"53":{"start":{"line":68,"column":21},"end":{"line":105,"column":17}},"54":{"start":{"line":69,"column":20},"end":{"line":69,"column":87}},"55":{"start":{"line":70,"column":48},"end":{"line":70,"column":79}},"56":{"start":{"line":71,"column":42},"end":{"line":71,"column":110}},"57":{"start":{"line":72,"column":51},"end":{"line":72,"column":91}},"58":{"start":{"line":73,"column":20},"end":{"line":86,"column":21}},"59":{"start":{"line":74,"column":42},"end":{"line":74,"column":75}},"60":{"start":{"line":75,"column":24},"end":{"line":75,"column":69}},"61":{"start":{"line":76,"column":41},"end":{"line":76,"column":139}},"62":{"start":{"line":77,"column":24},"end":{"line":80,"column":25}},"63":{"start":{"line":78,"column":28},"end":{"line":78,"column":117}},"64":{"start":{"line":79,"column":28},"end":{"line":79,"column":146}},"65":{"start":{"line":81,"column":24},"end":{"line":81,"column":98}},"66":{"start":{"line":82,"column":24},"end":{"line":82,"column":74}},"67":{"start":{"line":85,"column":24},"end":{"line":85,"column":70}},"68":{"start":{"line":87,"column":20},"end":{"line":87,"column":94}},"69":{"start":{"line":89,"column":21},"end":{"line":105,"column":17}},"70":{"start":{"line":90,"column":20},"end":{"line":90,"column":88}},"71":{"start":{"line":91,"column":42},"end":{"line":91,"column":98}},"72":{"start":{"line":92,"column":37},"end":{"line":92,"column":68}},"73":{"start":{"line":93,"column":52},"end":{"line":93,"column":155}},"74":{"start":{"line":94,"column":20},"end":{"line":100,"column":21}},"75":{"start":{"line":95,"column":24},"end":{"line":95,"column":156}},"76":{"start":{"line":96,"column":24},"end":{"line":96,"column":81}},"77":{"start":{"line":99,"column":24},"end":{"line":99,"column":70}},"78":{"start":{"line":101,"column":20},"end":{"line":101,"column":95}},"79":{"start":{"line":104,"column":20},"end":{"line":104,"column":98}},"80":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"81":{"start":{"line":109,"column":12},"end":{"line":109,"column":69}},"82":{"start":{"line":113,"column":8},"end":{"line":124,"column":9}},"83":{"start":{"line":114,"column":12},"end":{"line":114,"column":54}},"84":{"start":{"line":115,"column":29},"end":{"line":115,"column":48}},"85":{"start":{"line":116,"column":12},"end":{"line":118,"column":13}},"86":{"start":{"line":117,"column":16},"end":{"line":117,"column":60}},"87":{"start":{"line":119,"column":12},"end":{"line":119,"column":24}},"88":{"start":{"line":122,"column":12},"end":{"line":122,"column":75}},"89":{"start":{"line":123,"column":12},"end":{"line":123,"column":25}},"90":{"start":{"line":127,"column":8},"end":{"line":137,"column":9}},"91":{"start":{"line":128,"column":29},"end":{"line":128,"column":51}},"92":{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},"93":{"start":{"line":130,"column":16},"end":{"line":130,"column":60}},"94":{"start":{"line":132,"column":12},"end":{"line":132,"column":24}},"95":{"start":{"line":135,"column":12},"end":{"line":135,"column":75}},"96":{"start":{"line":136,"column":12},"end":{"line":136,"column":25}},"97":{"start":{"line":140,"column":8},"end":{"line":150,"column":9}},"98":{"start":{"line":141,"column":40},"end":{"line":141,"column":82}},"99":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"100":{"start":{"line":143,"column":16},"end":{"line":143,"column":71}},"101":{"start":{"line":145,"column":12},"end":{"line":145,"column":24}},"102":{"start":{"line":148,"column":12},"end":{"line":148,"column":67}},"103":{"start":{"line":149,"column":12},"end":{"line":149,"column":25}},"104":{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},"105":{"start":{"line":154,"column":12},"end":{"line":154,"column":27}},"106":{"start":{"line":158,"column":27},"end":{"line":158,"column":32}},"107":{"start":{"line":159,"column":37},"end":{"line":159,"column":39}},"108":{"start":{"line":160,"column":28},"end":{"line":160,"column":29}},"109":{"start":{"line":161,"column":32},"end":{"line":161,"column":33}},"110":{"start":{"line":162,"column":31},"end":{"line":162,"column":32}},"111":{"start":{"line":163,"column":8},"end":{"line":203,"column":9}},"112":{"start":{"line":163,"column":21},"end":{"line":163,"column":22}},"113":{"start":{"line":164,"column":12},"end":{"line":164,"column":37}},"114":{"start":{"line":165,"column":12},"end":{"line":165,"column":68}},"115":{"start":{"line":166,"column":12},"end":{"line":199,"column":13}},"116":{"start":{"line":167,"column":16},"end":{"line":171,"column":17}},"117":{"start":{"line":168,"column":20},"end":{"line":168,"column":24}},"118":{"start":{"line":169,"column":20},"end":{"line":169,"column":38}},"119":{"start":{"line":170,"column":20},"end":{"line":170,"column":29}},"120":{"start":{"line":172,"column":16},"end":{"line":176,"column":17}},"121":{"start":{"line":173,"column":20},"end":{"line":173,"column":24}},"122":{"start":{"line":174,"column":20},"end":{"line":174,"column":38}},"123":{"start":{"line":175,"column":20},"end":{"line":175,"column":29}},"124":{"start":{"line":179,"column":16},"end":{"line":198,"column":17}},"125":{"start":{"line":180,"column":20},"end":{"line":180,"column":69}},"126":{"start":{"line":181,"column":20},"end":{"line":181,"column":24}},"127":{"start":{"line":182,"column":20},"end":{"line":182,"column":29}},"128":{"start":{"line":185,"column":20},"end":{"line":187,"column":21}},"129":{"start":{"line":186,"column":24},"end":{"line":186,"column":53}},"130":{"start":{"line":188,"column":20},"end":{"line":197,"column":21}},"131":{"start":{"line":189,"column":24},"end":{"line":192,"column":25}},"132":{"start":{"line":190,"column":28},"end":{"line":190,"column":62}},"133":{"start":{"line":191,"column":28},"end":{"line":191,"column":32}},"134":{"start":{"line":193,"column":24},"end":{"line":196,"column":25}},"135":{"start":{"line":194,"column":28},"end":{"line":194,"column":61}},"136":{"start":{"line":195,"column":28},"end":{"line":195,"column":32}},"137":{"start":{"line":200,"column":12},"end":{"line":202,"column":13}},"138":{"start":{"line":201,"column":16},"end":{"line":201,"column":53}},"139":{"start":{"line":204,"column":8},"end":{"line":204,"column":38}},"140":{"start":{"line":207,"column":8},"end":{"line":209,"column":9}},"141":{"start":{"line":208,"column":12},"end":{"line":208,"column":19}},"142":{"start":{"line":210,"column":8},"end":{"line":212,"column":9}},"143":{"start":{"line":211,"column":12},"end":{"line":211,"column":114}},"144":{"start":{"line":213,"column":8},"end":{"line":215,"column":9}},"145":{"start":{"line":214,"column":12},"end":{"line":214,"column":54}},"146":{"start":{"line":218,"column":0},"end":{"line":218,"column":52}},"147":{"start":{"line":219,"column":13},"end":{"line":219,"column":39}},"148":{"start":{"line":220,"column":0},"end":{"line":222,"column":3}},"149":{"start":{"line":221,"column":4},"end":{"line":221,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":18},"end":{"line":26,"column":5}},"line":23},"8":{"name":"(anonymous_8)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":10},"end":{"line":38,"column":5}},"line":27},"9":{"name":"(anonymous_9)","decl":{"start":{"line":28,"column":47},"end":{"line":28,"column":48}},"loc":{"start":{"line":28,"column":60},"end":{"line":37,"column":9}},"line":28},"10":{"name":"(anonymous_10)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":39},"end":{"line":111,"column":5}},"line":39},"11":{"name":"(anonymous_11)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":26},"end":{"line":125,"column":5}},"line":112},"12":{"name":"(anonymous_12)","decl":{"start":{"line":126,"column":4},"end":{"line":126,"column":5}},"loc":{"start":{"line":126,"column":26},"end":{"line":138,"column":5}},"line":126},"13":{"name":"(anonymous_13)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":25},"end":{"line":151,"column":5}},"line":139},"14":{"name":"(anonymous_14)","decl":{"start":{"line":152,"column":4},"end":{"line":152,"column":5}},"loc":{"start":{"line":152,"column":31},"end":{"line":205,"column":5}},"line":152},"15":{"name":"(anonymous_15)","decl":{"start":{"line":206,"column":4},"end":{"line":206,"column":5}},"loc":{"start":{"line":206,"column":43},"end":{"line":216,"column":5}},"line":206},"16":{"name":"(anonymous_16)","decl":{"start":{"line":220,"column":19},"end":{"line":220,"column":20}},"loc":{"start":{"line":220,"column":30},"end":{"line":222,"column":1}},"line":220}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":31,"column":12},"end":{"line":36,"column":13}},"type":"if","locations":[{"start":{"line":31,"column":12},"end":{"line":36,"column":13}},{"start":{"line":31,"column":12},"end":{"line":36,"column":13}}],"line":31},"6":{"loc":{"start":{"line":43,"column":12},"end":{"line":46,"column":13}},"type":"if","locations":[{"start":{"line":43,"column":12},"end":{"line":46,"column":13}},{"start":{"line":43,"column":12},"end":{"line":46,"column":13}}],"line":43},"7":{"loc":{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},"type":"if","locations":[{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},{"start":{"line":51,"column":16},"end":{"line":53,"column":17}}],"line":51},"8":{"loc":{"start":{"line":54,"column":16},"end":{"line":105,"column":17}},"type":"if","locations":[{"start":{"line":54,"column":16},"end":{"line":105,"column":17}},{"start":{"line":54,"column":16},"end":{"line":105,"column":17}}],"line":54},"9":{"loc":{"start":{"line":59,"column":20},"end":{"line":65,"column":21}},"type":"if","locations":[{"start":{"line":59,"column":20},"end":{"line":65,"column":21}},{"start":{"line":59,"column":20},"end":{"line":65,"column":21}}],"line":59},"10":{"loc":{"start":{"line":60,"column":48},"end":{"line":60,"column":86}},"type":"cond-expr","locations":[{"start":{"line":60,"column":73},"end":{"line":60,"column":81}},{"start":{"line":60,"column":84},"end":{"line":60,"column":86}}],"line":60},"11":{"loc":{"start":{"line":66,"column":44},"end":{"line":66,"column":94}},"type":"binary-expr","locations":[{"start":{"line":66,"column":44},"end":{"line":66,"column":69}},{"start":{"line":66,"column":73},"end":{"line":66,"column":94}}],"line":66},"12":{"loc":{"start":{"line":68,"column":21},"end":{"line":105,"column":17}},"type":"if","locations":[{"start":{"line":68,"column":21},"end":{"line":105,"column":17}},{"start":{"line":68,"column":21},"end":{"line":105,"column":17}}],"line":68},"13":{"loc":{"start":{"line":73,"column":20},"end":{"line":86,"column":21}},"type":"if","locations":[{"start":{"line":73,"column":20},"end":{"line":86,"column":21}},{"start":{"line":73,"column":20},"end":{"line":86,"column":21}}],"line":73},"14":{"loc":{"start":{"line":76,"column":42},"end":{"line":76,"column":80}},"type":"cond-expr","locations":[{"start":{"line":76,"column":67},"end":{"line":76,"column":75}},{"start":{"line":76,"column":78},"end":{"line":76,"column":80}}],"line":76},"15":{"loc":{"start":{"line":87,"column":44},"end":{"line":87,"column":93}},"type":"binary-expr","locations":[{"start":{"line":87,"column":44},"end":{"line":87,"column":68}},{"start":{"line":87,"column":72},"end":{"line":87,"column":93}}],"line":87},"16":{"loc":{"start":{"line":89,"column":21},"end":{"line":105,"column":17}},"type":"if","locations":[{"start":{"line":89,"column":21},"end":{"line":105,"column":17}},{"start":{"line":89,"column":21},"end":{"line":105,"column":17}}],"line":89},"17":{"loc":{"start":{"line":94,"column":20},"end":{"line":100,"column":21}},"type":"if","locations":[{"start":{"line":94,"column":20},"end":{"line":100,"column":21}},{"start":{"line":94,"column":20},"end":{"line":100,"column":21}}],"line":94},"18":{"loc":{"start":{"line":95,"column":48},"end":{"line":95,"column":86}},"type":"cond-expr","locations":[{"start":{"line":95,"column":73},"end":{"line":95,"column":81}},{"start":{"line":95,"column":84},"end":{"line":95,"column":86}}],"line":95},"19":{"loc":{"start":{"line":101,"column":44},"end":{"line":101,"column":94}},"type":"binary-expr","locations":[{"start":{"line":101,"column":44},"end":{"line":101,"column":69}},{"start":{"line":101,"column":73},"end":{"line":101,"column":94}}],"line":101},"20":{"loc":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},{"start":{"line":108,"column":8},"end":{"line":110,"column":9}}],"line":108},"21":{"loc":{"start":{"line":116,"column":12},"end":{"line":118,"column":13}},"type":"if","locations":[{"start":{"line":116,"column":12},"end":{"line":118,"column":13}},{"start":{"line":116,"column":12},"end":{"line":118,"column":13}}],"line":116},"22":{"loc":{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},"type":"if","locations":[{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},{"start":{"line":129,"column":12},"end":{"line":131,"column":13}}],"line":129},"23":{"loc":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},{"start":{"line":142,"column":12},"end":{"line":144,"column":13}}],"line":142},"24":{"loc":{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},"type":"if","locations":[{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},{"start":{"line":153,"column":8},"end":{"line":155,"column":9}}],"line":153},"25":{"loc":{"start":{"line":153,"column":12},"end":{"line":153,"column":80}},"type":"binary-expr","locations":[{"start":{"line":153,"column":12},"end":{"line":153,"column":20}},{"start":{"line":153,"column":25},"end":{"line":153,"column":50}},{"start":{"line":153,"column":54},"end":{"line":153,"column":79}}],"line":153},"26":{"loc":{"start":{"line":165,"column":23},"end":{"line":165,"column":67}},"type":"cond-expr","locations":[{"start":{"line":165,"column":48},"end":{"line":165,"column":62}},{"start":{"line":165,"column":65},"end":{"line":165,"column":67}}],"line":165},"27":{"loc":{"start":{"line":166,"column":12},"end":{"line":199,"column":13}},"type":"if","locations":[{"start":{"line":166,"column":12},"end":{"line":199,"column":13}},{"start":{"line":166,"column":12},"end":{"line":199,"column":13}}],"line":166},"28":{"loc":{"start":{"line":167,"column":16},"end":{"line":171,"column":17}},"type":"if","locations":[{"start":{"line":167,"column":16},"end":{"line":171,"column":17}},{"start":{"line":167,"column":16},"end":{"line":171,"column":17}}],"line":167},"29":{"loc":{"start":{"line":167,"column":20},"end":{"line":167,"column":117}},"type":"binary-expr","locations":[{"start":{"line":167,"column":20},"end":{"line":167,"column":54}},{"start":{"line":167,"column":59},"end":{"line":167,"column":92}},{"start":{"line":167,"column":96},"end":{"line":167,"column":116}}],"line":167},"30":{"loc":{"start":{"line":172,"column":16},"end":{"line":176,"column":17}},"type":"if","locations":[{"start":{"line":172,"column":16},"end":{"line":176,"column":17}},{"start":{"line":172,"column":16},"end":{"line":176,"column":17}}],"line":172},"31":{"loc":{"start":{"line":172,"column":20},"end":{"line":172,"column":88}},"type":"binary-expr","locations":[{"start":{"line":172,"column":20},"end":{"line":172,"column":53}},{"start":{"line":172,"column":57},"end":{"line":172,"column":88}}],"line":172},"32":{"loc":{"start":{"line":179,"column":16},"end":{"line":198,"column":17}},"type":"if","locations":[{"start":{"line":179,"column":16},"end":{"line":198,"column":17}},{"start":{"line":179,"column":16},"end":{"line":198,"column":17}}],"line":179},"33":{"loc":{"start":{"line":179,"column":20},"end":{"line":179,"column":55}},"type":"binary-expr","locations":[{"start":{"line":179,"column":20},"end":{"line":179,"column":32}},{"start":{"line":179,"column":36},"end":{"line":179,"column":55}}],"line":179},"34":{"loc":{"start":{"line":185,"column":20},"end":{"line":187,"column":21}},"type":"if","locations":[{"start":{"line":185,"column":20},"end":{"line":187,"column":21}},{"start":{"line":185,"column":20},"end":{"line":187,"column":21}}],"line":185},"35":{"loc":{"start":{"line":188,"column":20},"end":{"line":197,"column":21}},"type":"if","locations":[{"start":{"line":188,"column":20},"end":{"line":197,"column":21}},{"start":{"line":188,"column":20},"end":{"line":197,"column":21}}],"line":188},"36":{"loc":{"start":{"line":189,"column":24},"end":{"line":192,"column":25}},"type":"if","locations":[{"start":{"line":189,"column":24},"end":{"line":192,"column":25}},{"start":{"line":189,"column":24},"end":{"line":192,"column":25}}],"line":189},"37":{"loc":{"start":{"line":193,"column":24},"end":{"line":196,"column":25}},"type":"if","locations":[{"start":{"line":193,"column":24},"end":{"line":196,"column":25}},{"start":{"line":193,"column":24},"end":{"line":196,"column":25}}],"line":193},"38":{"loc":{"start":{"line":200,"column":12},"end":{"line":202,"column":13}},"type":"if","locations":[{"start":{"line":200,"column":12},"end":{"line":202,"column":13}},{"start":{"line":200,"column":12},"end":{"line":202,"column":13}}],"line":200},"39":{"loc":{"start":{"line":207,"column":8},"end":{"line":209,"column":9}},"type":"if","locations":[{"start":{"line":207,"column":8},"end":{"line":209,"column":9}},{"start":{"line":207,"column":8},"end":{"line":209,"column":9}}],"line":207},"40":{"loc":{"start":{"line":207,"column":12},"end":{"line":207,"column":56}},"type":"binary-expr","locations":[{"start":{"line":207,"column":12},"end":{"line":207,"column":23}},{"start":{"line":207,"column":27},"end":{"line":207,"column":56}}],"line":207}},"s":{"0":1,"1":0,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":6,"24":6,"25":1,"26":1,"27":0,"28":0,"29":0,"30":0,"31":5,"32":5,"33":5,"34":5,"35":0,"36":0,"37":5,"38":5,"39":5,"40":5,"41":5,"42":1,"43":5,"44":1,"45":1,"46":1,"47":1,"48":1,"49":0,"50":0,"51":1,"52":1,"53":4,"54":1,"55":1,"56":1,"57":1,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":1,"69":3,"70":1,"71":1,"72":1,"73":1,"74":1,"75":0,"76":0,"77":1,"78":1,"79":2,"80":3,"81":3,"82":5,"83":5,"84":5,"85":1,"86":1,"87":1,"88":4,"89":4,"90":3,"91":3,"92":1,"93":1,"94":1,"95":2,"96":2,"97":4,"98":4,"99":1,"100":1,"101":1,"102":3,"103":3,"104":5,"105":4,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":7110,"114":7110,"115":7110,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":7110,"125":0,"126":0,"127":0,"128":7110,"129":221,"130":7110,"131":2947,"132":0,"133":0,"134":2947,"135":0,"136":0,"137":7110,"138":7110,"139":1,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":1,"147":1,"148":1,"149":1},"f":{"0":1,"1":0,"2":0,"3":1,"4":0,"5":0,"6":0,"7":6,"8":1,"9":1,"10":5,"11":5,"12":3,"13":4,"14":5,"15":0,"16":1},"b":{"0":[1,1,1],"1":[0,0],"2":[1,1],"3":[0,0],"4":[1,1],"5":[0,0],"6":[0,5],"7":[1,4],"8":[1,4],"9":[0,1],"10":[0,0],"11":[1,1],"12":[1,3],"13":[0,1],"14":[0,0],"15":[1,1],"16":[1,2],"17":[0,1],"18":[0,0],"19":[1,1],"20":[3,0],"21":[1,0],"22":[1,0],"23":[1,0],"24":[4,1],"25":[5,5,4],"26":[7109,1],"27":[0,7110],"28":[0,0],"29":[0,0,0],"30":[0,0],"31":[0,0],"32":[0,7110],"33":[7110,4162],"34":[221,6889],"35":[2947,4163],"36":[0,2947],"37":[0,2947],"38":[7110,0],"39":[0,0],"40":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/variableSubstitution.ts","sources":["/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/variableSubstitution.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sCAAuC;AAEvC,wEAAiE;AACjE,kGAAgF;AAChF,8DAA2D;AAC3D,kFAAuE;AACvE,kDAAiD;AAEjD,yBAA0B;AAC1B,gCAAiC;AACjC,iEAAkE;AAElE,MAAa,oBAAoB;IAAjC;QA+MY,qBAAgB,GAAG,IAAI,GAAG,EAAe,CAAC;QAC1C,mBAAc,GAAW,EAAE,CAAC;IACxC,CAAC;IAhNS,GAAG;;YACL,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;YAC5D,IAAI,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAClC,IAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAC;gBAChB,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;aAC3C;iBACI;gBACD,MAAM,KAAK,CAAC,4GAA4G,CAAC,CAAC;aAC7H;QACL,CAAC;KAAA;IAED,2BAA2B,CAAC,KAAe;QACvC,IAAI,qBAAqB,GAAY,KAAK,CAAC;QAC3C,KAAI,IAAI,IAAI,IAAI,KAAK,EAAC;YAClB,IAAI,YAAY,GAAG,mBAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAC1C,IAAG,YAAY,CAAC,MAAM,IAAI,CAAC,EAAE;gBACzB,IAAI,CAAC,KAAK,CAAC,yCAAyC,GAAG,IAAI,CAAC,CAAC;gBAC7D,SAAS;aACZ;YACD,KAAI,IAAI,IAAI,IAAI,YAAY,EAAE;gBAC1B,IAAI,UAAU,GAAW,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAC/C,IAAI,cAAc,GAAG,YAAY,CAAC,kBAAkB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBACvE,IAAI,WAAW,GAAW,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,QAA0B,CAAC,CAAC;gBACzF,IAAG,cAAc,CAAC,OAAO,EAAE;oBACvB,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBACtC;gBACD,IAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE;oBAC/B,OAAO,CAAC,GAAG,CAAC,+CAA+C,GAAG,IAAI,CAAC,CAAC;oBACpE,IAAI,eAAe,GAAI,IAAI,kDAAgB,EAAE,CAAC;oBAC9C,IAAI,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACjD,IAAI,yBAAyB,GAAG,eAAe,CAAC,sBAAsB,CAAC,UAAU,EAAE,mCAAc,CAAC,aAAa,EAAE,CAAC,CAAC;oBACnH,IAAG,yBAAyB,EAAE;wBAC1B,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,QAAQ,EAAE,cAAc,CAAC,QAA0B,EAAE,CAAC,CAAC;wBAChK,OAAO,CAAC,GAAG,CAAC,8BAA8B,IAAI,EAAE,CAAC,CAAC;qBACrD;yBACI;wBACD,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC,CAAC;qBACjD;oBACD,qBAAqB,GAAG,yBAAyB,IAAI,qBAAqB,CAAC;iBAC9E;qBACI,IAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE;oBACnC,OAAO,CAAC,GAAG,CAAC,8CAA8C,GAAG,IAAI,CAAC,CAAC;oBACnE,IAAI,qBAAqB,GAAkB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAC3E,IAAI,eAAe,GAAG,IAAI,yCAAe,CAAC,qBAAqB,CAAC,CAAC;oBACjE,IAAI,wBAAwB,GAAG,eAAe,CAAC,sBAAsB,EAAE,CAAC;oBACxE,IAAG,wBAAwB,EAAE;wBACzB,IAAI,WAAW,GAAG,qBAAqB,CAAC,SAAS,EAAE,CAAC;wBACpD,IAAI,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;wBAC7C,IAAI,UAAU,GAAG,CAAE,cAAc,CAAC,OAAO,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAE,GAAG,qBAAqB,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;wBACrH,KAAI,IAAI,oBAAoB,IAAI,eAAe,CAAC,qBAAqB,EAAE;4BACnE,IAAI,CAAC,KAAK,CAAC,qDAAqD,GAAG,oBAAoB,CAAC,CAAC;4BACzF,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,CAAC,CAAC;yBACzH;wBACD,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,cAAc,CAAC,QAA0B,EAAE,CAAC,CAAC;wBAC5F,OAAO,CAAC,GAAG,CAAC,8BAA8B,IAAI,EAAE,CAAC,CAAC;qBACrD;yBACI;wBACD,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC,CAAC;qBACjD;oBACD,qBAAqB,GAAG,wBAAwB,IAAI,qBAAqB,CAAC;iBAC7E;qBACI,IAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE;oBACpC,OAAO,CAAC,GAAG,CAAC,+CAA+C,GAAG,IAAI,CAAC,CAAC;oBACpE,IAAI,eAAe,GAAI,IAAI,kDAAgB,EAAE,CAAC;oBAC9C,IAAI,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACjD,IAAI,yBAAyB,GAAG,eAAe,CAAC,sBAAsB,CAAC,UAAU,EAAE,mCAAc,CAAC,aAAa,EAAE,CAAC,CAAC;oBACnH,IAAG,yBAAyB,EAAE;wBAC1B,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,EAAE,QAAQ,EAAE,cAAc,CAAC,QAA0B,EAAE,CAAC,CAAC;wBACtJ,OAAO,CAAC,GAAG,CAAC,qCAAqC,IAAI,EAAE,CAAC,CAAC;qBAC5D;yBACI;wBACD,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC,CAAC;qBACjD;oBACD,qBAAqB,GAAG,yBAAyB,IAAI,qBAAqB,CAAC;iBAC9E;qBACI;oBACD,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;iBACjF;aACJ;SACJ;QAED,IAAG,CAAC,qBAAqB,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC5D;IACL,CAAC;IAEO,MAAM,CAAC,IAAY,EAAE,OAAe;QACxC,IAAI;YACA,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAC1C,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACrC,IAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACjC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;aAC/C;YACD,OAAO,IAAI,CAAC;SACf;QACD,OAAM,SAAS,EAAE;YACb,IAAI,CAAC,cAAc,IAAI,oBAAoB,GAAG,SAAS,GAAG,IAAI,CAAC;YAC/D,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAEO,MAAM,CAAC,IAAY,EAAE,OAAe;QACxC,IAAI;YACA,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACxC,IAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACjC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;aAC/C;YACD,OAAO,IAAI,CAAC;SACf;QACD,OAAM,SAAS,EAAE;YACb,IAAI,CAAC,cAAc,IAAI,oBAAoB,GAAG,SAAS,GAAG,IAAI,CAAC;YAC/D,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAEO,KAAK,CAAC,IAAY,EAAE,OAAe;QACvC,IAAG;YACC,IAAI,qBAAqB,GAAG,IAAI,6BAAa,CAAC,OAAO,CAAC,CAAC;YACvD,IAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACjC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;aAC1D;YACD,OAAO,IAAI,CAAC;SACf;QACD,OAAM,SAAS,EAAE;YACb,IAAI,CAAC,cAAc,IAAI,mBAAmB,GAAG,SAAS,CAAC;YACvD,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAEO,iBAAiB,CAAC,OAAO;QAC7B,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;YACtE,OAAO,OAAO,CAAC;SAClB;QAED,IAAI,WAAW,CAAC;QAChB,IAAI,QAAQ,CAAC;QACb,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,IAAI,sBAAsB,GAAG,EAAE,CAAC;QAChC,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,iBAAiB,GAAG,CAAC,CAAC;QAC1B,IAAI,gBAAgB,GAAG,CAAC,CAAC;QAEzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACzB,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAExD,IAAI,aAAa,EAAE;gBACf,IAAI,aAAa,IAAI,iBAAiB,IAAI,CAAC,WAAW,GAAG,QAAQ,KAAK,MAAM,IAAI,WAAW,KAAK,IAAI,CAAC,EAAE;oBACnG,CAAC,EAAE,CAAC;oBACJ,aAAa,GAAG,CAAC,CAAC;oBAClB,SAAS;iBACZ;gBAED,IAAI,aAAa,IAAI,gBAAgB,IAAI,WAAW,GAAG,QAAQ,KAAK,IAAI,EAAE;oBACtE,CAAC,EAAE,CAAC;oBACJ,aAAa,GAAG,CAAC,CAAC;oBAClB,SAAS;iBACZ;aAEJ;iBAAM;gBACH,IAAI,YAAY,IAAI,WAAW,IAAI,IAAI,EAAE;oBACrC,sBAAsB,IAAI,WAAW,GAAG,QAAQ,CAAC;oBACjD,CAAC,EAAE,CAAC,CAAC,2CAA2C;oBAChD,SAAS;iBACZ;qBACI;oBACD,IAAI,WAAW,IAAI,GAAG,EAAE;wBACpB,YAAY,GAAG,CAAC,YAAY,CAAC;qBAChC;oBAED,IAAI,CAAC,YAAY,EAAE;wBACf,IAAI,WAAW,GAAG,QAAQ,KAAK,IAAI,EAAE;4BACjC,aAAa,GAAG,iBAAiB,CAAC;4BAClC,CAAC,EAAE,CAAC;yBACP;wBAED,IAAI,WAAW,GAAG,QAAQ,KAAK,IAAI,EAAE;4BACjC,aAAa,GAAG,gBAAgB,CAAC;4BACjC,CAAC,EAAE,CAAC;yBACP;qBACJ;iBACJ;aACJ;YAED,IAAI,CAAC,aAAa,EAAE;gBAChB,sBAAsB,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;aACxC;SACJ;QAED,OAAO,sBAAsB,CAAC;IAClC,CAAC;IAEO,0BAA0B,CAAC,UAAU;QACzC,IAAG,CAAC,UAAU,IAAI,OAAO,UAAU,IAAI,QAAQ,EAAE;YAC7C,OAAO;SACV;QAED,KAAI,IAAI,YAAY,IAAI,UAAU,CAAC,KAAK,EAAE;YACtC,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC;SACzG;QAED,KAAI,IAAI,QAAQ,IAAI,UAAU,CAAC,QAAQ,EAAE;YACrC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;SAC7C;IACL,CAAC;CAIJ;AAjND,oDAiNC;AAED,IAAI,MAAM,GAAG,IAAI,oBAAoB,EAAE,CAAC;AACxC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;IACzB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC","sourcesContent":["import core = require('@actions/core');\r\n\r\nimport { EnvTreeUtility } from \"./operations/envVariableUtility\";\r\nimport { JsonSubstitution } from './operations/jsonVariableSubstitutionUtility';\r\nimport { XmlDomUtility } from \"./operations/xmlDomUtility\";\r\nimport { XmlSubstitution } from './operations/xmlVariableSubstitution';\r\nimport { findfiles } from \"./operations/utility\";\r\n\r\nimport fs = require('fs');\r\nimport yaml = require('js-yaml');\r\nimport fileEncoding = require('./operations/fileEncodingUtility');\r\n\r\nexport class VariableSubstitution {\r\n    async run() {\r\n        let filesInput = core.getInput(\"files\", { required: true });\r\n        let files = filesInput.split(\",\");\r\n        if(files.length > 0){\r\n            this.segregateFilesAndSubstitute(files);\r\n        }\r\n        else {\r\n            throw Error('File Tranformation is not enabled. Please provide JSON/XML or YAML target files for variable substitution.');\r\n        }\r\n    }\r\n    \r\n    segregateFilesAndSubstitute(files: string[]) {\r\n        let isSubstitutionApplied: boolean = false;\r\n        for(let file of files){\r\n            let matchedFiles = findfiles(file.trim());\r\n            if(matchedFiles.length == 0) {\r\n                core.error('No file matched with specific pattern: ' + file);\r\n                continue;\r\n            }\r\n            for(let file of matchedFiles) {\r\n                let fileBuffer: Buffer = fs.readFileSync(file);\r\n                let fileEncodeType = fileEncoding.detectFileEncoding(file, fileBuffer);\r\n                let fileContent: string = fileBuffer.toString(fileEncodeType.encoding as BufferEncoding);\r\n                if(fileEncodeType.withBOM) {\r\n                    fileContent = fileContent.slice(1);\r\n                }\r\n                if(this.isJson(file, fileContent)) {\r\n                    console.log(\"Applying variable substitution on JSON file: \" + file);\r\n                    let jsonSubsitution =  new JsonSubstitution();\r\n                    let jsonObject = this.fileContentCache.get(file);\r\n                    let isJsonSubstitutionApplied = jsonSubsitution.substituteJsonVariable(jsonObject, EnvTreeUtility.getEnvVarTree());\r\n                    if(isJsonSubstitutionApplied) {\r\n                        fs.writeFileSync(file, (fileEncodeType.withBOM ? '\\uFEFF' : '') + JSON.stringify(jsonObject, null, 4), { encoding: fileEncodeType.encoding as BufferEncoding });\r\n                        console.log(`Successfully updated file: ${file}`);\r\n                    }\r\n                    else {\r\n                        console.log('Skipped updating file: ' + file);\r\n                    }\r\n                    isSubstitutionApplied = isJsonSubstitutionApplied || isSubstitutionApplied;\r\n                }\r\n                else if(this.isXml(file, fileContent)) {\r\n                    console.log(\"Applying variable substitution on XML file: \" + file);   \r\n                    let xmlDomUtilityInstance: XmlDomUtility = this.fileContentCache.get(file);\r\n                    let xmlSubstitution = new XmlSubstitution(xmlDomUtilityInstance);\r\n                    let isXmlSubstitutionApplied = xmlSubstitution.substituteXmlVariables();\r\n                    if(isXmlSubstitutionApplied) {\r\n                        let xmlDocument = xmlDomUtilityInstance.getXmlDom();\r\n                        this.replaceEscapeXMLCharacters(xmlDocument);\r\n                        let domContent = ( fileEncodeType.withBOM? '\\uFEFF' : '' ) + xmlDomUtilityInstance.getContentWithHeader(xmlDocument);\r\n                        for(let replacableTokenValue in xmlSubstitution.replacableTokenValues) {\r\n                            core.debug('Substituting original value in place of temp_name: ' + replacableTokenValue);\r\n                            domContent = domContent.split(replacableTokenValue).join(xmlSubstitution.replacableTokenValues[replacableTokenValue]);\r\n                        }\r\n                        fs.writeFileSync(file, domContent, { encoding: fileEncodeType.encoding as BufferEncoding });\r\n                        console.log(`Successfully updated file: ${file}`);\r\n                    }\r\n                    else {\r\n                        console.log('Skipped updating file: ' + file);\r\n                    }\r\n                    isSubstitutionApplied = isXmlSubstitutionApplied || isSubstitutionApplied;\r\n                }                \r\n                else if(this.isYaml(file, fileContent)) {\r\n                    console.log(\"Applying variable substitution on YAML file: \" + file);\r\n                    let jsonSubsitution =  new JsonSubstitution();\r\n                    let yamlObject = this.fileContentCache.get(file);\r\n                    let isYamlSubstitutionApplied = jsonSubsitution.substituteJsonVariable(yamlObject, EnvTreeUtility.getEnvVarTree());\r\n                    if(isYamlSubstitutionApplied) {\r\n                        fs.writeFileSync(file, (fileEncodeType.withBOM ? '\\uFEFF' : '') + yaml.safeDump(yamlObject), { encoding: fileEncodeType.encoding as BufferEncoding });\r\n                        console.log(`Successfully updated config file: ${file}`);\r\n                    }\r\n                    else {\r\n                        console.log('Skipped updating file: ' + file);\r\n                    }\r\n                    isSubstitutionApplied = isYamlSubstitutionApplied || isSubstitutionApplied;\r\n                }\r\n                else {\r\n                    throw new Error(\"Could not parse file: \" + file + \"\\n\" + this.parseException);\r\n                }\r\n            }\r\n        }\r\n    \r\n        if(!isSubstitutionApplied) {\r\n            throw new Error(\"Failed to apply variable substitution\");\r\n        }\r\n    }\r\n    \r\n    private isJson(file: string, content: string): boolean {\r\n        try {\r\n            content = this.stripJsonComments(content);\r\n            let jsonObject = JSON.parse(content);\r\n            if(!this.fileContentCache.has(file)) {\r\n                this.fileContentCache.set(file, jsonObject);\r\n            }\r\n            return true;\r\n        }\r\n        catch(exception) {\r\n            this.parseException += \"JSON parse error: \" + exception + \"\\n\";\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    private isYaml(file: string, content: string) : boolean {\r\n        try {\r\n            let yamlObject = yaml.safeLoad(content);\r\n            if(!this.fileContentCache.has(file)) {\r\n                this.fileContentCache.set(file, yamlObject);\r\n            }\r\n            return true;\r\n        }\r\n        catch(exception) {\r\n            this.parseException += \"YAML parse error: \" + exception + \"\\n\";\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    private isXml(file: string, content: string): boolean {\r\n        try{\r\n            let ltxDomUtiltiyInstance = new XmlDomUtility(content);\r\n            if(!this.fileContentCache.has(file)) {\r\n                this.fileContentCache.set(file, ltxDomUtiltiyInstance);\r\n            }\r\n            return true;\r\n        }\r\n        catch(exception) {\r\n            this.parseException += \"XML parse error: \" + exception;\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    private stripJsonComments(content) {\r\n        if (!content || (content.indexOf(\"//\") < 0 && content.indexOf(\"/*\") < 0)) {\r\n            return content;\r\n        }\r\n    \r\n        var currentChar;\r\n        var nextChar;\r\n        var insideQuotes = false;\r\n        var contentWithoutComments = '';\r\n        var insideComment = 0;\r\n        var singlelineComment = 1;\r\n        var multilineComment = 2;\r\n    \r\n        for (var i = 0; i < content.length; i++) {\r\n            currentChar = content[i];\r\n            nextChar = i + 1 < content.length ? content[i + 1] : \"\";\r\n    \r\n            if (insideComment) {\r\n                if (insideComment == singlelineComment && (currentChar + nextChar === '\\r\\n' || currentChar === '\\n')) {\r\n                    i--;\r\n                    insideComment = 0;\r\n                    continue;\r\n                }\r\n    \r\n                if (insideComment == multilineComment && currentChar + nextChar === '*/') {\r\n                    i++;\r\n                    insideComment = 0;\r\n                    continue;\r\n                }\r\n    \r\n            } else {\r\n                if (insideQuotes && currentChar == \"\\\\\") {\r\n                    contentWithoutComments += currentChar + nextChar;\r\n                    i++; // Skipping checks for next char if escaped\r\n                    continue;\r\n                }\r\n                else {\r\n                    if (currentChar == '\"') {\r\n                        insideQuotes = !insideQuotes;\r\n                    }\r\n    \r\n                    if (!insideQuotes) {\r\n                        if (currentChar + nextChar === '//') {\r\n                            insideComment = singlelineComment;\r\n                            i++;\r\n                        }\r\n    \r\n                        if (currentChar + nextChar === '/*') {\r\n                            insideComment = multilineComment;\r\n                            i++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if (!insideComment) {\r\n                contentWithoutComments += content[i];\r\n            }\r\n        }\r\n    \r\n        return contentWithoutComments;\r\n    }\r\n    \r\n    private replaceEscapeXMLCharacters(xmlDOMNode) {\r\n        if(!xmlDOMNode || typeof xmlDOMNode == 'string') {\r\n            return;\r\n        }\r\n    \r\n        for(var xmlAttribute in xmlDOMNode.attrs) {\r\n            xmlDOMNode.attrs[xmlAttribute] = xmlDOMNode.attrs[xmlAttribute].replace(/'/g, \"APOS_CHARACTER_TOKEN\");\r\n        }\r\n    \r\n        for(var xmlChild of xmlDOMNode.children) {\r\n            this.replaceEscapeXMLCharacters(xmlChild);\r\n        }\r\n    }    \r\n    \r\n    private fileContentCache = new Map<String, any>();\r\n    private parseException: string = \"\";\r\n}\r\n\r\nlet varSub = new VariableSubstitution();\r\nvarSub.run().catch((error) => {\t\r\n    core.setFailed(error);\t\r\n});"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6e82a8a87b43ddf98af3e5463b9ae593e9083f5f"},"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/xmlDomUtility.ts":{"path":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/xmlDomUtility.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":51}},"3":{"start":{"line":5,"column":10},"end":{"line":5,"column":24}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":36}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":36}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":34}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":44}},"8":{"start":{"line":12,"column":8},"end":{"line":12,"column":36}},"9":{"start":{"line":13,"column":8},"end":{"line":13,"column":43}},"10":{"start":{"line":16,"column":8},"end":{"line":16,"column":27}},"11":{"start":{"line":19,"column":20},"end":{"line":19,"column":44}},"12":{"start":{"line":20,"column":8},"end":{"line":25,"column":9}},"13":{"start":{"line":21,"column":28},"end":{"line":21,"column":65}},"14":{"start":{"line":22,"column":12},"end":{"line":24,"column":13}},"15":{"start":{"line":23,"column":16},"end":{"line":23,"column":47}},"16":{"start":{"line":28,"column":8},"end":{"line":28,"column":110}},"17":{"start":{"line":34,"column":8},"end":{"line":52,"column":9}},"18":{"start":{"line":35,"column":27},"end":{"line":35,"column":36}},"19":{"start":{"line":36,"column":12},"end":{"line":51,"column":13}},"20":{"start":{"line":37,"column":16},"end":{"line":37,"column":50}},"21":{"start":{"line":38,"column":34},"end":{"line":38,"column":66}},"22":{"start":{"line":39,"column":16},"end":{"line":42,"column":17}},"23":{"start":{"line":40,"column":20},"end":{"line":40,"column":37}},"24":{"start":{"line":41,"column":20},"end":{"line":41,"column":67}},"25":{"start":{"line":43,"column":16},"end":{"line":43,"column":39}},"26":{"start":{"line":44,"column":33},"end":{"line":44,"column":46}},"27":{"start":{"line":45,"column":16},"end":{"line":50,"column":17}},"28":{"start":{"line":45,"column":29},"end":{"line":45,"column":30}},"29":{"start":{"line":46,"column":40},"end":{"line":46,"column":58}},"30":{"start":{"line":47,"column":20},"end":{"line":49,"column":21}},"31":{"start":{"line":48,"column":24},"end":{"line":48,"column":61}},"32":{"start":{"line":58,"column":8},"end":{"line":59,"column":22}},"33":{"start":{"line":59,"column":12},"end":{"line":59,"column":22}},"34":{"start":{"line":60,"column":31},"end":{"line":60,"column":77}},"35":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"36":{"start":{"line":62,"column":12},"end":{"line":62,"column":34}},"37":{"start":{"line":64,"column":8},"end":{"line":64,"column":32}},"38":{"start":{"line":70,"column":8},"end":{"line":71,"column":22}},"39":{"start":{"line":71,"column":12},"end":{"line":71,"column":22}},"40":{"start":{"line":72,"column":23},"end":{"line":72,"column":36}},"41":{"start":{"line":73,"column":24},"end":{"line":73,"column":26}},"42":{"start":{"line":74,"column":8},"end":{"line":85,"column":9}},"43":{"start":{"line":75,"column":12},"end":{"line":84,"column":13}},"44":{"start":{"line":75,"column":25},"end":{"line":75,"column":26}},"45":{"start":{"line":76,"column":32},"end":{"line":76,"column":48}},"46":{"start":{"line":77,"column":16},"end":{"line":79,"column":17}},"47":{"start":{"line":78,"column":20},"end":{"line":78,"column":48}},"48":{"start":{"line":80,"column":37},"end":{"line":80,"column":89}},"49":{"start":{"line":81,"column":16},"end":{"line":83,"column":17}},"50":{"start":{"line":82,"column":20},"end":{"line":82,"column":65}},"51":{"start":{"line":86,"column":8},"end":{"line":86,"column":25}},"52":{"start":{"line":89,"column":0},"end":{"line":89,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":28},"end":{"line":14,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":16},"end":{"line":17,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":27},"end":{"line":26,"column":5}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":33},"end":{"line":29,"column":5}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":27},"end":{"line":53,"column":5}},"line":33},"5":{"name":"(anonymous_5)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":35},"end":{"line":65,"column":5}},"line":57},"6":{"name":"(anonymous_6)","decl":{"start":{"line":69,"column":4},"end":{"line":69,"column":5}},"loc":{"start":{"line":69,"column":45},"end":{"line":87,"column":5}},"line":69}},"branchMap":{"0":{"loc":{"start":{"line":20,"column":8},"end":{"line":25,"column":9}},"type":"if","locations":[{"start":{"line":20,"column":8},"end":{"line":25,"column":9}},{"start":{"line":20,"column":8},"end":{"line":25,"column":9}}],"line":20},"1":{"loc":{"start":{"line":22,"column":12},"end":{"line":24,"column":13}},"type":"if","locations":[{"start":{"line":22,"column":12},"end":{"line":24,"column":13}},{"start":{"line":22,"column":12},"end":{"line":24,"column":13}}],"line":22},"2":{"loc":{"start":{"line":22,"column":16},"end":{"line":22,"column":70}},"type":"binary-expr","locations":[{"start":{"line":22,"column":16},"end":{"line":22,"column":42}},{"start":{"line":22,"column":46},"end":{"line":22,"column":70}}],"line":22},"3":{"loc":{"start":{"line":28,"column":15},"end":{"line":28,"column":109}},"type":"cond-expr","locations":[{"start":{"line":28,"column":24},"end":{"line":28,"column":104}},{"start":{"line":28,"column":107},"end":{"line":28,"column":109}}],"line":28},"4":{"loc":{"start":{"line":28,"column":25},"end":{"line":28,"column":76}},"type":"cond-expr","locations":[{"start":{"line":28,"column":46},"end":{"line":28,"column":71}},{"start":{"line":28,"column":74},"end":{"line":28,"column":76}}],"line":28},"5":{"loc":{"start":{"line":34,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":52,"column":9}},{"start":{"line":34,"column":8},"end":{"line":52,"column":9}}],"line":34},"6":{"loc":{"start":{"line":36,"column":12},"end":{"line":51,"column":13}},"type":"if","locations":[{"start":{"line":36,"column":12},"end":{"line":51,"column":13}},{"start":{"line":36,"column":12},"end":{"line":51,"column":13}}],"line":36},"7":{"loc":{"start":{"line":39,"column":16},"end":{"line":42,"column":17}},"type":"if","locations":[{"start":{"line":39,"column":16},"end":{"line":42,"column":17}},{"start":{"line":39,"column":16},"end":{"line":42,"column":17}}],"line":39},"8":{"loc":{"start":{"line":39,"column":20},"end":{"line":39,"column":72}},"type":"binary-expr","locations":[{"start":{"line":39,"column":20},"end":{"line":39,"column":39}},{"start":{"line":39,"column":43},"end":{"line":39,"column":72}}],"line":39},"9":{"loc":{"start":{"line":47,"column":20},"end":{"line":49,"column":21}},"type":"if","locations":[{"start":{"line":47,"column":20},"end":{"line":49,"column":21}},{"start":{"line":47,"column":20},"end":{"line":49,"column":21}}],"line":47},"10":{"loc":{"start":{"line":58,"column":8},"end":{"line":59,"column":22}},"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":59,"column":22}},{"start":{"line":58,"column":8},"end":{"line":59,"column":22}}],"line":58},"11":{"loc":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},{"start":{"line":61,"column":8},"end":{"line":63,"column":9}}],"line":61},"12":{"loc":{"start":{"line":70,"column":8},"end":{"line":71,"column":22}},"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":71,"column":22}},{"start":{"line":70,"column":8},"end":{"line":71,"column":22}}],"line":70},"13":{"loc":{"start":{"line":74,"column":8},"end":{"line":85,"column":9}},"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":85,"column":9}},{"start":{"line":74,"column":8},"end":{"line":85,"column":9}}],"line":74},"14":{"loc":{"start":{"line":77,"column":16},"end":{"line":79,"column":17}},"type":"if","locations":[{"start":{"line":77,"column":16},"end":{"line":79,"column":17}},{"start":{"line":77,"column":16},"end":{"line":79,"column":17}}],"line":77},"15":{"loc":{"start":{"line":77,"column":20},"end":{"line":77,"column":77}},"type":"binary-expr","locations":[{"start":{"line":77,"column":20},"end":{"line":77,"column":53}},{"start":{"line":77,"column":57},"end":{"line":77,"column":77}}],"line":77},"16":{"loc":{"start":{"line":81,"column":16},"end":{"line":83,"column":17}},"type":"if","locations":[{"start":{"line":81,"column":16},"end":{"line":83,"column":17}},{"start":{"line":81,"column":16},"end":{"line":83,"column":17}}],"line":81},"17":{"loc":{"start":{"line":81,"column":20},"end":{"line":81,"column":63}},"type":"binary-expr","locations":[{"start":{"line":81,"column":20},"end":{"line":81,"column":34}},{"start":{"line":81,"column":38},"end":{"line":81,"column":63}}],"line":81}},"s":{"0":1,"1":1,"2":1,"3":1,"4":6,"5":6,"6":6,"7":6,"8":3,"9":3,"10":2,"11":3,"12":3,"13":3,"14":3,"15":0,"16":2,"17":228,"18":228,"19":228,"20":228,"21":228,"22":228,"23":99,"24":99,"25":228,"26":228,"27":228,"28":228,"29":540,"30":540,"31":225,"32":10,"33":0,"34":10,"35":10,"36":0,"37":10,"38":8,"39":4,"40":4,"41":4,"42":4,"43":4,"44":4,"45":6,"46":6,"47":2,"48":6,"49":6,"50":0,"51":4,"52":1},"f":{"0":6,"1":2,"2":3,"3":2,"4":228,"5":10,"6":8},"b":{"0":[3,0],"1":[0,3],"2":[3,0],"3":[2,0],"4":[0,2],"5":[228,0],"6":[228,0],"7":[99,129],"8":[228,129],"9":[225,315],"10":[0,10],"11":[0,10],"12":[4,4],"13":[4,0],"14":[2,4],"15":[6,2],"16":[0,6],"17":[6,6]},"inputSourceMap":{"version":3,"file":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/xmlDomUtility.ts","sources":["/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/xmlDomUtility.ts"],"names":[],"mappings":"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","sourcesContent":["var envVarUtility = require(\"./envVariableUtility\");\r\nvar ltx = require('ltx');\r\n\r\nexport class XmlDomUtility  {\r\n\r\n    private xmlDomLookUpTable = {};\r\n    private headerContent;\r\n    private xmlDom;\r\n\r\n    public constructor(xmlContent) {\r\n        this.xmlDomLookUpTable = {};\r\n        this.headerContent = null;\r\n        this.xmlDom = ltx.parse(xmlContent);\r\n        this.readHeader(xmlContent);\r\n        this.buildLookUpTable(this.xmlDom);\r\n    }\r\n\r\n    public getXmlDom() {\r\n        return this.xmlDom;\r\n    }\r\n\r\n    private readHeader(xmlContent) {\r\n        let index = xmlContent.indexOf('\\n');\r\n        if(index > -1) {\r\n            let firstLine = xmlContent.substring(0,index).trim();\r\n            if(firstLine.startsWith(\"<?\") && firstLine.endsWith(\"?>\")) {\r\n                this.headerContent = firstLine;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getContentWithHeader(xmlDom) {\r\n        return xmlDom ? (this.headerContent ? this.headerContent + \"\\n\" : \"\") + xmlDom.root().toString() : \"\";\r\n    }\r\n\r\n    /**\r\n     * Define method to create a lookup for DOM \r\n     */\r\n    private buildLookUpTable(node) {\r\n        if(node){\r\n            let nodeName = node.name;\r\n            if(nodeName){\r\n                nodeName = nodeName.toLowerCase();\r\n                let listOfNodes = this.xmlDomLookUpTable[nodeName];\r\n                if(listOfNodes == null || !(Array.isArray(listOfNodes))) {\r\n                    listOfNodes = [];\r\n                    this.xmlDomLookUpTable[nodeName] = listOfNodes;\r\n                }\r\n                listOfNodes.push(node);\r\n                let childNodes = node.children;\r\n                for(let i=0 ; i < childNodes.length; i++){\r\n                    let childNodeName = childNodes[i].name;\r\n                    if(childNodeName) {\r\n                        this.buildLookUpTable(childNodes[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Returns array of nodes which match with the tag name.\r\n     */\r\n    public getElementsByTagName(nodeName) {\r\n        if(envVarUtility.isEmpty(nodeName))\r\n            return [];\r\n        let selectedElements = this.xmlDomLookUpTable[nodeName.toLowerCase()];\r\n        if(!selectedElements){\r\n            selectedElements = [];\r\n        }\r\n        return selectedElements;\r\n    }\r\n\r\n    /**\r\n     *  Search in subtree with provided node name\r\n     */\r\n    public getChildElementsByTagName(node, tagName) {\r\n        if(!envVarUtility.isObject(node) )\r\n            return [];\r\n        let children = node.children;\r\n        let liveNodes = [];\r\n        if(children){\r\n            for( let i=0; i < children.length; i++ ){\r\n                let childName = children[i].name;\r\n                if( !envVarUtility.isEmpty(childName) && tagName == childName){\r\n                    liveNodes.push(children[i]);\r\n                }\r\n                let liveChildNodes = this.getChildElementsByTagName(children[i], tagName);\r\n                if(liveChildNodes && liveChildNodes.length > 0){\r\n                    liveNodes = liveNodes.concat(liveChildNodes);\r\n                }\r\n            }\r\n        }\r\n        return liveNodes;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4fc7ed9c963284f215475bd1945e1f90dce37cca"},"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/xmlVariableSubstitution.ts":{"path":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/xmlVariableSubstitution.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":4,"column":13},"end":{"line":4,"column":37}},"3":{"start":{"line":5,"column":20},"end":{"line":5,"column":51}},"4":{"start":{"line":6,"column":13},"end":{"line":6,"column":90}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":69}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":58}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":51}},"8":{"start":{"line":14,"column":36},"end":{"line":14,"column":41}},"9":{"start":{"line":15,"column":8},"end":{"line":41,"column":9}},"10":{"start":{"line":16,"column":24},"end":{"line":16,"column":68}},"11":{"start":{"line":17,"column":12},"end":{"line":20,"column":13}},"12":{"start":{"line":18,"column":16},"end":{"line":18,"column":95}},"13":{"start":{"line":19,"column":16},"end":{"line":19,"column":25}},"14":{"start":{"line":21,"column":12},"end":{"line":40,"column":13}},"15":{"start":{"line":22,"column":16},"end":{"line":39,"column":17}},"16":{"start":{"line":23,"column":20},"end":{"line":23,"column":88}},"17":{"start":{"line":24,"column":20},"end":{"line":38,"column":21}},"18":{"start":{"line":25,"column":24},"end":{"line":33,"column":25}},"19":{"start":{"line":26,"column":28},"end":{"line":26,"column":120}},"20":{"start":{"line":28,"column":29},"end":{"line":33,"column":25}},"21":{"start":{"line":29,"column":28},"end":{"line":29,"column":131}},"22":{"start":{"line":32,"column":28},"end":{"line":32,"column":114}},"23":{"start":{"line":36,"column":24},"end":{"line":36,"column":97}},"24":{"start":{"line":37,"column":24},"end":{"line":37,"column":42}},"25":{"start":{"line":42,"column":8},"end":{"line":42,"column":37}},"26":{"start":{"line":45,"column":36},"end":{"line":45,"column":41}},"27":{"start":{"line":46,"column":23},"end":{"line":46,"column":87}},"28":{"start":{"line":47,"column":8},"end":{"line":58,"column":9}},"29":{"start":{"line":48,"column":12},"end":{"line":57,"column":13}},"30":{"start":{"line":49,"column":34},"end":{"line":49,"column":54}},"31":{"start":{"line":50,"column":16},"end":{"line":56,"column":17}},"32":{"start":{"line":51,"column":45},"end":{"line":51,"column":97}},"33":{"start":{"line":52,"column":20},"end":{"line":55,"column":21}},"34":{"start":{"line":53,"column":41},"end":{"line":53,"column":62}},"35":{"start":{"line":54,"column":24},"end":{"line":54,"column":113}},"36":{"start":{"line":59,"column":8},"end":{"line":59,"column":37}},"37":{"start":{"line":62,"column":36},"end":{"line":62,"column":41}},"38":{"start":{"line":63,"column":8},"end":{"line":66,"column":9}},"39":{"start":{"line":64,"column":12},"end":{"line":64,"column":63}},"40":{"start":{"line":65,"column":12},"end":{"line":65,"column":41}},"41":{"start":{"line":67,"column":43},"end":{"line":67,"column":71}},"42":{"start":{"line":68,"column":35},"end":{"line":68,"column":51}},"43":{"start":{"line":69,"column":8},"end":{"line":97,"column":9}},"44":{"start":{"line":70,"column":37},"end":{"line":70,"column":143}},"45":{"start":{"line":71,"column":32},"end":{"line":71,"column":110}},"46":{"start":{"line":72,"column":12},"end":{"line":96,"column":13}},"47":{"start":{"line":73,"column":53},"end":{"line":73,"column":112}},"48":{"start":{"line":74,"column":38},"end":{"line":74,"column":43}},"49":{"start":{"line":75,"column":16},"end":{"line":91,"column":17}},"50":{"start":{"line":76,"column":20},"end":{"line":76,"column":133}},"51":{"start":{"line":77,"column":20},"end":{"line":77,"column":83}},"52":{"start":{"line":78,"column":20},"end":{"line":78,"column":43}},"53":{"start":{"line":81,"column":35},"end":{"line":81,"column":54}},"54":{"start":{"line":82,"column":20},"end":{"line":90,"column":21}},"55":{"start":{"line":83,"column":24},"end":{"line":89,"column":25}},"56":{"start":{"line":84,"column":28},"end":{"line":88,"column":29}},"57":{"start":{"line":85,"column":32},"end":{"line":85,"column":145}},"58":{"start":{"line":86,"column":32},"end":{"line":86,"column":87}},"59":{"start":{"line":87,"column":32},"end":{"line":87,"column":55}},"60":{"start":{"line":92,"column":16},"end":{"line":95,"column":17}},"61":{"start":{"line":93,"column":20},"end":{"line":93,"column":141}},"62":{"start":{"line":94,"column":20},"end":{"line":94,"column":49}},"63":{"start":{"line":98,"column":23},"end":{"line":98,"column":42}},"64":{"start":{"line":99,"column":8},"end":{"line":103,"column":9}},"65":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"66":{"start":{"line":101,"column":16},"end":{"line":101,"column":104}},"67":{"start":{"line":104,"column":8},"end":{"line":104,"column":37}},"68":{"start":{"line":107,"column":36},"end":{"line":107,"column":41}},"69":{"start":{"line":108,"column":42},"end":{"line":108,"column":73}},"70":{"start":{"line":109,"column":8},"end":{"line":112,"column":9}},"71":{"start":{"line":110,"column":12},"end":{"line":110,"column":63}},"72":{"start":{"line":111,"column":12},"end":{"line":111,"column":41}},"73":{"start":{"line":113,"column":35},"end":{"line":113,"column":51}},"74":{"start":{"line":114,"column":8},"end":{"line":129,"column":9}},"75":{"start":{"line":115,"column":12},"end":{"line":128,"column":13}},"76":{"start":{"line":116,"column":52},"end":{"line":116,"column":117}},"77":{"start":{"line":117,"column":16},"end":{"line":117,"column":168}},"78":{"start":{"line":118,"column":16},"end":{"line":118,"column":83}},"79":{"start":{"line":119,"column":16},"end":{"line":119,"column":143}},"80":{"start":{"line":120,"column":16},"end":{"line":120,"column":45}},"81":{"start":{"line":122,"column":17},"end":{"line":128,"column":13}},"82":{"start":{"line":123,"column":52},"end":{"line":123,"column":100}},"83":{"start":{"line":124,"column":16},"end":{"line":124,"column":168}},"84":{"start":{"line":125,"column":16},"end":{"line":125,"column":83}},"85":{"start":{"line":126,"column":16},"end":{"line":126,"column":136}},"86":{"start":{"line":127,"column":16},"end":{"line":127,"column":45}},"87":{"start":{"line":130,"column":23},"end":{"line":130,"column":42}},"88":{"start":{"line":131,"column":8},"end":{"line":135,"column":9}},"89":{"start":{"line":132,"column":12},"end":{"line":134,"column":13}},"90":{"start":{"line":133,"column":16},"end":{"line":133,"column":121}},"91":{"start":{"line":136,"column":8},"end":{"line":136,"column":37}},"92":{"start":{"line":139,"column":0},"end":{"line":139,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":39},"end":{"line":12,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":29},"end":{"line":43,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":42},"end":{"line":60,"column":5}},"line":44},"3":{"name":"(anonymous_3)","decl":{"start":{"line":61,"column":4},"end":{"line":61,"column":5}},"loc":{"start":{"line":61,"column":39},"end":{"line":105,"column":5}},"line":61},"4":{"name":"(anonymous_4)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":56},"end":{"line":137,"column":5}},"line":106}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":12},"end":{"line":20,"column":13}},"type":"if","locations":[{"start":{"line":17,"column":12},"end":{"line":20,"column":13}},{"start":{"line":17,"column":12},"end":{"line":20,"column":13}}],"line":17},"1":{"loc":{"start":{"line":22,"column":16},"end":{"line":39,"column":17}},"type":"if","locations":[{"start":{"line":22,"column":16},"end":{"line":39,"column":17}},{"start":{"line":22,"column":16},"end":{"line":39,"column":17}}],"line":22},"2":{"loc":{"start":{"line":25,"column":24},"end":{"line":33,"column":25}},"type":"if","locations":[{"start":{"line":25,"column":24},"end":{"line":33,"column":25}},{"start":{"line":25,"column":24},"end":{"line":33,"column":25}}],"line":25},"3":{"loc":{"start":{"line":26,"column":52},"end":{"line":26,"column":119}},"type":"binary-expr","locations":[{"start":{"line":26,"column":52},"end":{"line":26,"column":94}},{"start":{"line":26,"column":98},"end":{"line":26,"column":119}}],"line":26},"4":{"loc":{"start":{"line":28,"column":29},"end":{"line":33,"column":25}},"type":"if","locations":[{"start":{"line":28,"column":29},"end":{"line":33,"column":25}},{"start":{"line":28,"column":29},"end":{"line":33,"column":25}}],"line":28},"5":{"loc":{"start":{"line":29,"column":52},"end":{"line":29,"column":130}},"type":"binary-expr","locations":[{"start":{"line":29,"column":52},"end":{"line":29,"column":105}},{"start":{"line":29,"column":109},"end":{"line":29,"column":130}}],"line":29},"6":{"loc":{"start":{"line":32,"column":52},"end":{"line":32,"column":113}},"type":"binary-expr","locations":[{"start":{"line":32,"column":52},"end":{"line":32,"column":88}},{"start":{"line":32,"column":92},"end":{"line":32,"column":113}}],"line":32},"7":{"loc":{"start":{"line":48,"column":12},"end":{"line":57,"column":13}},"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":57,"column":13}},{"start":{"line":48,"column":12},"end":{"line":57,"column":13}}],"line":48},"8":{"loc":{"start":{"line":50,"column":16},"end":{"line":56,"column":17}},"type":"if","locations":[{"start":{"line":50,"column":16},"end":{"line":56,"column":17}},{"start":{"line":50,"column":16},"end":{"line":56,"column":17}}],"line":50},"9":{"loc":{"start":{"line":52,"column":20},"end":{"line":55,"column":21}},"type":"if","locations":[{"start":{"line":52,"column":20},"end":{"line":55,"column":21}},{"start":{"line":52,"column":20},"end":{"line":55,"column":21}}],"line":52},"10":{"loc":{"start":{"line":54,"column":48},"end":{"line":54,"column":112}},"type":"binary-expr","locations":[{"start":{"line":54,"column":48},"end":{"line":54,"column":87}},{"start":{"line":54,"column":91},"end":{"line":54,"column":112}}],"line":54},"11":{"loc":{"start":{"line":63,"column":8},"end":{"line":66,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":66,"column":9}},{"start":{"line":63,"column":8},"end":{"line":66,"column":9}}],"line":63},"12":{"loc":{"start":{"line":63,"column":12},"end":{"line":63,"column":117}},"type":"binary-expr","locations":[{"start":{"line":63,"column":12},"end":{"line":63,"column":45}},{"start":{"line":63,"column":49},"end":{"line":63,"column":84}},{"start":{"line":63,"column":88},"end":{"line":63,"column":117}}],"line":63},"13":{"loc":{"start":{"line":70,"column":37},"end":{"line":70,"column":143}},"type":"cond-expr","locations":[{"start":{"line":70,"column":92},"end":{"line":70,"column":127}},{"start":{"line":70,"column":130},"end":{"line":70,"column":143}}],"line":70},"14":{"loc":{"start":{"line":70,"column":38},"end":{"line":70,"column":88}},"type":"binary-expr","locations":[{"start":{"line":70,"column":38},"end":{"line":70,"column":61}},{"start":{"line":70,"column":65},"end":{"line":70,"column":88}}],"line":70},"15":{"loc":{"start":{"line":71,"column":32},"end":{"line":71,"column":110}},"type":"cond-expr","locations":[{"start":{"line":71,"column":87},"end":{"line":71,"column":94}},{"start":{"line":71,"column":97},"end":{"line":71,"column":110}}],"line":71},"16":{"loc":{"start":{"line":71,"column":33},"end":{"line":71,"column":83}},"type":"binary-expr","locations":[{"start":{"line":71,"column":33},"end":{"line":71,"column":56}},{"start":{"line":71,"column":60},"end":{"line":71,"column":83}}],"line":71},"17":{"loc":{"start":{"line":72,"column":12},"end":{"line":96,"column":13}},"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":96,"column":13}},{"start":{"line":72,"column":12},"end":{"line":96,"column":13}}],"line":72},"18":{"loc":{"start":{"line":75,"column":16},"end":{"line":91,"column":17}},"type":"if","locations":[{"start":{"line":75,"column":16},"end":{"line":91,"column":17}},{"start":{"line":75,"column":16},"end":{"line":91,"column":17}}],"line":75},"19":{"loc":{"start":{"line":83,"column":24},"end":{"line":89,"column":25}},"type":"if","locations":[{"start":{"line":83,"column":24},"end":{"line":89,"column":25}},{"start":{"line":83,"column":24},"end":{"line":89,"column":25}}],"line":83},"20":{"loc":{"start":{"line":83,"column":28},"end":{"line":83,"column":96}},"type":"binary-expr","locations":[{"start":{"line":83,"column":28},"end":{"line":83,"column":61}},{"start":{"line":83,"column":65},"end":{"line":83,"column":96}}],"line":83},"21":{"loc":{"start":{"line":84,"column":28},"end":{"line":88,"column":29}},"type":"if","locations":[{"start":{"line":84,"column":28},"end":{"line":88,"column":29}},{"start":{"line":84,"column":28},"end":{"line":88,"column":29}}],"line":84},"22":{"loc":{"start":{"line":92,"column":16},"end":{"line":95,"column":17}},"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":95,"column":17}},{"start":{"line":92,"column":16},"end":{"line":95,"column":17}}],"line":92},"23":{"loc":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},{"start":{"line":100,"column":12},"end":{"line":102,"column":13}}],"line":100},"24":{"loc":{"start":{"line":101,"column":40},"end":{"line":101,"column":103}},"type":"binary-expr","locations":[{"start":{"line":101,"column":40},"end":{"line":101,"column":78}},{"start":{"line":101,"column":82},"end":{"line":101,"column":103}}],"line":101},"25":{"loc":{"start":{"line":109,"column":8},"end":{"line":112,"column":9}},"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":112,"column":9}},{"start":{"line":109,"column":8},"end":{"line":112,"column":9}}],"line":109},"26":{"loc":{"start":{"line":109,"column":12},"end":{"line":109,"column":117}},"type":"binary-expr","locations":[{"start":{"line":109,"column":12},"end":{"line":109,"column":45}},{"start":{"line":109,"column":49},"end":{"line":109,"column":84}},{"start":{"line":109,"column":88},"end":{"line":109,"column":117}}],"line":109},"27":{"loc":{"start":{"line":114,"column":8},"end":{"line":129,"column":9}},"type":"if","locations":[{"start":{"line":114,"column":8},"end":{"line":129,"column":9}},{"start":{"line":114,"column":8},"end":{"line":129,"column":9}}],"line":114},"28":{"loc":{"start":{"line":115,"column":12},"end":{"line":128,"column":13}},"type":"if","locations":[{"start":{"line":115,"column":12},"end":{"line":128,"column":13}},{"start":{"line":115,"column":12},"end":{"line":128,"column":13}}],"line":115},"29":{"loc":{"start":{"line":115,"column":16},"end":{"line":115,"column":110}},"type":"binary-expr","locations":[{"start":{"line":115,"column":16},"end":{"line":115,"column":59}},{"start":{"line":115,"column":63},"end":{"line":115,"column":110}}],"line":115},"30":{"loc":{"start":{"line":122,"column":17},"end":{"line":128,"column":13}},"type":"if","locations":[{"start":{"line":122,"column":17},"end":{"line":128,"column":13}},{"start":{"line":122,"column":17},"end":{"line":128,"column":13}}],"line":122},"31":{"loc":{"start":{"line":132,"column":12},"end":{"line":134,"column":13}},"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":134,"column":13}},{"start":{"line":132,"column":12},"end":{"line":134,"column":13}}],"line":132},"32":{"loc":{"start":{"line":133,"column":40},"end":{"line":133,"column":120}},"type":"binary-expr","locations":[{"start":{"line":133,"column":40},"end":{"line":133,"column":95}},{"start":{"line":133,"column":99},"end":{"line":133,"column":120}}],"line":133}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":2,"6":2,"7":2,"8":2,"9":2,"10":8,"11":8,"12":0,"13":0,"14":8,"15":8,"16":8,"17":8,"18":8,"19":2,"20":6,"21":2,"22":4,"23":0,"24":0,"25":2,"26":2,"27":2,"28":2,"29":2,"30":2,"31":2,"32":2,"33":2,"34":2,"35":2,"36":2,"37":38,"38":38,"39":0,"40":0,"41":38,"42":38,"43":38,"44":46,"45":46,"46":46,"47":5,"48":5,"49":5,"50":4,"51":4,"52":4,"53":1,"54":1,"55":3,"56":1,"57":1,"58":1,"59":1,"60":5,"61":5,"62":5,"63":38,"64":38,"65":82,"66":32,"67":38,"68":12,"69":12,"70":12,"71":0,"72":0,"73":12,"74":12,"75":8,"76":3,"77":3,"78":3,"79":3,"80":3,"81":5,"82":1,"83":1,"84":1,"85":1,"86":1,"87":12,"88":12,"89":22,"90":10,"91":12,"92":1},"f":{"0":2,"1":2,"2":2,"3":38,"4":12},"b":{"0":[0,8],"1":[8,0],"2":[2,6],"3":[2,1],"4":[2,4],"5":[2,1],"6":[4,2],"7":[2,0],"8":[2,0],"9":[2,0],"10":[2,1],"11":[0,38],"12":[38,38,38],"13":[18,28],"14":[46,30],"15":[18,28],"16":[46,30],"17":[5,41],"18":[4,1],"19":[1,2],"20":[3,1],"21":[1,0],"22":[5,0],"23":[32,50],"24":[32,25],"25":[0,12],"26":[12,12,12],"27":[8,4],"28":[3,5],"29":[8,8],"30":[1,4],"31":[10,12],"32":[10,6]},"inputSourceMap":{"version":3,"file":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/xmlVariableSubstitution.ts","sources":["/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/xmlVariableSubstitution.ts"],"names":[],"mappings":";;;AAAA,sCAAsC;AAItC,IAAI,aAAa,GAAG,OAAO,CAAE,sBAAsB,CAAC,CAAC;AAErD,MAAM,IAAI,GAAG,CAAC,qBAAqB,EAAE,aAAa,EAAE,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;AAE3F,MAAa,eAAe;IAExB,YAAY,qBAAoC;QA6IzC,0BAAqB,GAAG,EAAE,sBAAsB,EAAE,GAAG,EAAE,CAAC;QA5I3D,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,cAAc,EAAE,CAAC;QAClD,IAAI,CAAC,aAAa,GAAG,qBAAqB,CAAC;IAC/C,CAAC;IAED,sBAAsB;QAClB,IAAI,qBAAqB,GAAY,KAAK,CAAC;QAC3C,KAAI,IAAI,GAAG,IAAI,IAAI,EAAE;YACjB,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YACzD,IAAG,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;gBAClB,IAAI,CAAC,KAAK,CAAC,gCAAgC,GAAG,GAAG,GAAG,yBAAyB,CAAC,CAAC;gBAC/E,SAAS;aACZ;YACD,KAAI,IAAI,OAAO,IAAI,KAAK,EAAE;gBACtB,IAAG,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAC;oBAC/B,OAAO,CAAC,GAAG,CAAC,wCAAwC,EAAG,OAAO,CAAC,IAAI,CAAC,CAAC;oBACrE,IAAI;wBACA,IAAG,OAAO,CAAC,IAAI,IAAI,gBAAgB,EAAE;4BACjC,qBAAqB,GAAG,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,IAAI,qBAAqB,CAAC;yBAC/F;6BACI,IAAG,OAAO,CAAC,IAAI,IAAI,mBAAmB,EAAE;4BACzC,qBAAqB,GAAG,IAAI,CAAC,uCAAuC,CAAC,OAAO,CAAC,IAAI,qBAAqB,CAAC;yBAC1G;6BACI;4BACD,qBAAqB,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,IAAI,qBAAqB,CAAC;yBACzF;qBACJ;oBAAC,OAAO,KAAK,EAAC;wBACX,IAAI,CAAC,KAAK,CAAC,6CAA6C,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;wBACzE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBACrB;iBACJ;aACJ;SACJ;QACD,OAAO,qBAAqB,CAAC;IACjC,CAAC;IAEO,4BAA4B,CAAC,OAAO;QACxC,IAAI,qBAAqB,GAAY,KAAK,CAAC;QAC3C,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAChF,KAAI,IAAI,OAAO,IAAI,QAAQ,EAAE;YACzB,IAAG,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBAChC,IAAI,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACvC,IAAG,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;oBACpC,IAAI,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;oBAC9E,IAAI,kBAAkB,CAAC,MAAM,IAAI,CAAC,EAAE;wBAChC,IAAI,UAAU,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;wBACvC,qBAAqB,GAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,IAAI,qBAAqB,CAAC;qBAC5F;iBACJ;aACJ;SACJ;QACD,OAAO,qBAAqB,CAAC;IACjC,CAAC;IAEO,sBAAsB,CAAC,UAAU;QAErC,IAAI,qBAAqB,GAAY,KAAK,CAAC;QAC3C,IAAI,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,EAAE;YAC3G,IAAI,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;YACnD,OAAO,qBAAqB,CAAC;SAChC;QAED,MAAM,0BAA0B,GAAG,4BAA4B,CAAC;QAChE,IAAI,oBAAoB,GAAG,UAAU,CAAC,KAAK,CAAC;QAE5C,KAAI,IAAI,aAAa,IAAI,oBAAoB,EAAE;YAC3C,IAAI,kBAAkB,GAAG,CAAC,aAAa,KAAK,KAAK,IAAI,aAAa,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;YACpI,IAAI,aAAa,GAAG,CAAC,aAAa,KAAK,KAAK,IAAI,aAAa,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC;YAEnG,IAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,SAAS,EAAE;gBACtD,IAAI,8BAA8B,GAAG,0BAA0B,GAAG,GAAG,GAAG,kBAAkB,GAAG,GAAG,CAAC;gBACjG,IAAI,eAAe,GAAY,KAAK,CAAC;gBACrC,IAAG,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,SAAS,EAAE;oBAC/C,OAAO,CAAC,GAAG,CAAC,2BAA2B,kBAAkB,sBAAsB,8BAA8B,EAAE,CAAC,CAAC;oBACjH,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,8BAA8B,CAAC,CAAC;oBAC/D,eAAe,GAAG,IAAI,CAAC;iBAC1B;qBAAM;oBACH,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;oBACnC,KAAI,IAAI,SAAS,IAAI,QAAQ,EAAE;wBAC3B,IAAG,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,IAAI,IAAI,aAAa,EAAE;4BACrE,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gCACjC,OAAO,CAAC,GAAG,CAAC,2BAA2B,kBAAkB,sBAAsB,8BAA8B,EAAE,CAAC,CAAC;gCACjH,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,8BAA8B,CAAC;gCACvD,eAAe,GAAG,IAAI,CAAC;6BAC1B;yBACJ;qBACJ;iBACJ;gBAED,IAAG,eAAe,EAAE;oBAChB,IAAI,CAAC,qBAAqB,CAAC,8BAA8B,CAAC,GAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;oBAC1H,qBAAqB,GAAG,IAAI,CAAC;iBAChC;aACJ;SACJ;QACD,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;QACnC,KAAI,IAAI,SAAS,IAAI,QAAQ,EAAE;YAC3B,IAAG,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gBAClC,qBAAqB,GAAG,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,IAAI,qBAAqB,CAAC;aAC3F;SACJ;QACD,OAAO,qBAAqB,CAAC;IACjC,CAAC;IAEO,uCAAuC,CAAC,UAAU;QACtD,IAAI,qBAAqB,GAAY,KAAK,CAAC;QAC3C,MAAM,yBAAyB,GAAG,+BAA+B,CAAC;QAClE,IAAI,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,EAAE;YAC3G,IAAI,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;YACnD,OAAO,qBAAqB,CAAC;SAChC;QACD,IAAI,oBAAoB,GAAG,UAAU,CAAC,KAAK,CAAC;QAE5C,IAAG,oBAAoB,CAAC,cAAc,CAAC,kBAAkB,CAAC,EAAE;YACxD,IAAG,oBAAoB,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE;gBAC/F,IAAI,6BAA6B,GAAG,yBAAyB,GAAG,GAAG,GAAG,oBAAoB,CAAC,IAAI,GAAG,GAAG,CAAC;gBACtG,IAAI,CAAC,KAAK,CAAC,6DAA6D,oBAAoB,CAAC,IAAI,sBAAsB,6BAA6B,EAAE,CAAC,CAAC;gBACxJ,UAAU,CAAC,IAAI,CAAC,kBAAkB,EAAE,6BAA6B,CAAC,CAAC;gBACnE,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBAC/H,qBAAqB,GAAG,IAAI,CAAC;aAChC;iBACI,IAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,SAAS,EAAE;gBAC3D,IAAI,6BAA6B,GAAG,yBAAyB,GAAG,oBAAoB,CAAC;gBACrF,IAAI,CAAC,KAAK,CAAC,6DAA6D,oBAAoB,CAAC,IAAI,sBAAsB,6BAA6B,EAAE,CAAC,CAAC;gBACxJ,UAAU,CAAC,IAAI,CAAC,kBAAkB,EAAE,6BAA6B,CAAC,CAAC;gBACnE,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBACxH,qBAAqB,GAAG,IAAI,CAAA;aAC/B;SACJ;QAED,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;QACnC,KAAI,IAAI,SAAS,IAAI,QAAQ,EAAE;YAC3B,IAAG,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gBAClC,qBAAqB,GAAI,IAAI,CAAC,uCAAuC,CAAC,SAAS,CAAC,IAAI,qBAAqB,CAAC;aAC7G;SACJ;QACD,OAAO,qBAAqB,CAAC;IACjC,CAAC;CAKJ;AAhJD,0CAgJC","sourcesContent":["import core =require('@actions/core');\r\n\r\nimport { XmlDomUtility } from \"./xmlDomUtility\";\r\n\r\nlet envVarUtility = require ('./envVariableUtility');\r\n\r\nconst tags = [\"applicationSettings\", \"appSettings\", \"connectionStrings\", \"configSections\"];\r\n\r\nexport class XmlSubstitution {\r\n\r\n    constructor(xmlDomUtilityInstance: XmlDomUtility) {\r\n        this.variableMap = envVarUtility.getVariableMap();\r\n        this.xmlDomUtility = xmlDomUtilityInstance;\r\n    }\r\n    \r\n    substituteXmlVariables() {\r\n        let isSubstitutionApplied: boolean = false;\r\n        for(let tag of tags) {\r\n            let nodes = this.xmlDomUtility.getElementsByTagName(tag); \r\n            if(nodes.length == 0) {\r\n                core.debug(\"Unable to find node with tag '\" + tag + \"' in provided xml file.\");\r\n                continue;\r\n            }\r\n            for(let xmlNode of nodes) {\r\n                if(envVarUtility.isObject(xmlNode)){\r\n                    console.log('Processing substitution for xml node: ' , xmlNode.name);\r\n                    try {\r\n                        if(xmlNode.name == \"configSections\") {\r\n                            isSubstitutionApplied = this.updateXmlConfigNodeAttribute(xmlNode) || isSubstitutionApplied;\r\n                        }\r\n                        else if(xmlNode.name == \"connectionStrings\") {\r\n                            isSubstitutionApplied = this.updateXmlConnectionStringsNodeAttribute(xmlNode) || isSubstitutionApplied;\r\n                        }\r\n                        else {\r\n                            isSubstitutionApplied = this.updateXmlNodeAttribute(xmlNode) || isSubstitutionApplied;\r\n                        }\r\n                    } catch (error){\r\n                        core.debug(\"Error occurred while processing xml node : \" + xmlNode.name);\r\n                        core.debug(error);\r\n                    }\r\n                }  \r\n            }\r\n        }        \r\n        return isSubstitutionApplied;\r\n    }\r\n\r\n    private updateXmlConfigNodeAttribute(xmlNode): boolean {\r\n        let isSubstitutionApplied: boolean = false;\r\n        let sections = this.xmlDomUtility.getChildElementsByTagName(xmlNode, \"section\");\r\n        for(let section of sections) {\r\n            if(envVarUtility.isObject(section)) {\r\n                let sectionName = section.attr('name');\r\n                if(!envVarUtility.isEmpty(sectionName)) {\r\n                    let customSectionNodes = this.xmlDomUtility.getElementsByTagName(sectionName);\r\n                    if( customSectionNodes.length != 0) {\r\n                        let customNode = customSectionNodes[0];\r\n                        isSubstitutionApplied = this.updateXmlNodeAttribute(customNode) || isSubstitutionApplied;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return isSubstitutionApplied;\r\n    }\r\n    \r\n    private updateXmlNodeAttribute(xmlDomNode): boolean {\r\n    \r\n        let isSubstitutionApplied: boolean = false;\r\n        if (envVarUtility.isEmpty(xmlDomNode) || !envVarUtility.isObject(xmlDomNode) || xmlDomNode.name == \"#comment\") {\r\n            core.debug(\"Provided node is empty or a comment.\");\r\n            return isSubstitutionApplied;\r\n        }\r\n    \r\n        const ConfigFileAppSettingsToken = 'CONFIG_FILE_SETTINGS_TOKEN';\r\n        let xmlDomNodeAttributes = xmlDomNode.attrs;\r\n    \r\n        for(var attributeName in xmlDomNodeAttributes) {\r\n            var attributeNameValue = (attributeName === \"key\" || attributeName == \"name\") ? xmlDomNodeAttributes[attributeName] : attributeName;\r\n            var attributeName = (attributeName === \"key\" || attributeName == \"name\") ? \"value\" : attributeName;\r\n    \r\n            if(this.variableMap.get(attributeNameValue) != undefined) {\r\n                let ConfigFileAppSettingsTokenName = ConfigFileAppSettingsToken + '(' + attributeNameValue + ')';\r\n                let isValueReplaced: boolean = false;\r\n                if(xmlDomNode.getAttr(attributeName) != undefined) {\r\n                    console.log(`Updating value for key: ${attributeNameValue} with token value: ${ConfigFileAppSettingsTokenName}`);\r\n                    xmlDomNode.attr(attributeName, ConfigFileAppSettingsTokenName);\r\n                    isValueReplaced = true;\r\n                } else {\r\n                    let children = xmlDomNode.children;\r\n                    for(var childNode of children) {\r\n                        if(envVarUtility.isObject(childNode) && childNode.name == attributeName) {\r\n                            if (childNode.children.length === 1) {\r\n                                console.log(`Updating value for key: ${attributeNameValue} with token value: ${ConfigFileAppSettingsTokenName}`);\r\n                                childNode.children[0] = ConfigFileAppSettingsTokenName;\r\n                                isValueReplaced = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                if(isValueReplaced) {\r\n                    this.replacableTokenValues[ConfigFileAppSettingsTokenName] =  this.variableMap.get(attributeNameValue).replace(/\"/g, \"'\");\r\n                    isSubstitutionApplied = true;\r\n                }\r\n            }\r\n        }\r\n        let children = xmlDomNode.children;\r\n        for(var childNode of children) {\r\n            if(envVarUtility.isObject(childNode)) {\r\n                isSubstitutionApplied = this.updateXmlNodeAttribute(childNode) || isSubstitutionApplied;\r\n            }\r\n        }\r\n        return isSubstitutionApplied;\r\n    }\r\n    \r\n    private updateXmlConnectionStringsNodeAttribute(xmlDomNode): boolean {    \r\n        let isSubstitutionApplied: boolean = false;\r\n        const ConfigFileConnStringToken = 'CONFIG_FILE_CONN_STRING_TOKEN';\r\n        if (envVarUtility.isEmpty(xmlDomNode) || !envVarUtility.isObject(xmlDomNode) || xmlDomNode.name == \"#comment\") {\r\n            core.debug(\"Provided node is empty or a comment.\");\r\n            return isSubstitutionApplied;\r\n        }\r\n        let xmlDomNodeAttributes = xmlDomNode.attrs;\r\n    \r\n        if(xmlDomNodeAttributes.hasOwnProperty(\"connectionString\")) {\r\n            if(xmlDomNodeAttributes.hasOwnProperty(\"name\") && this.variableMap.get(xmlDomNodeAttributes.name)) {\r\n                let ConfigFileConnStringTokenName = ConfigFileConnStringToken + '(' + xmlDomNodeAttributes.name + ')';\r\n                core.debug(`Substituting connectionString value for connectionString= ${xmlDomNodeAttributes.name} with token value: ${ConfigFileConnStringTokenName}`);\r\n                xmlDomNode.attr(\"connectionString\", ConfigFileConnStringTokenName);\r\n                this.replacableTokenValues[ConfigFileConnStringTokenName] = this.variableMap.get(xmlDomNodeAttributes.name).replace(/\"/g, \"'\");\r\n                isSubstitutionApplied = true;\r\n            }\r\n            else if(this.variableMap.get(\"connectionString\") != undefined) {\r\n                let ConfigFileConnStringTokenName = ConfigFileConnStringToken + '(connectionString)';\r\n                core.debug(`Substituting connectionString value for connectionString= ${xmlDomNodeAttributes.name} with token value: ${ConfigFileConnStringTokenName}`);\r\n                xmlDomNode.attr(\"connectionString\", ConfigFileConnStringTokenName);\r\n                this.replacableTokenValues[ConfigFileConnStringTokenName] = this.variableMap.get(\"connectionString\").replace(/\"/g, \"'\");\r\n                isSubstitutionApplied = true\r\n            }\r\n        }\r\n    \r\n        let children = xmlDomNode.children;\r\n        for(var childNode of children) {\r\n            if(envVarUtility.isObject(childNode)) {\r\n                isSubstitutionApplied =  this.updateXmlConnectionStringsNodeAttribute(childNode) || isSubstitutionApplied;\r\n            }\r\n        }\r\n        return isSubstitutionApplied;\r\n    }\r\n    \r\n    private variableMap: Map<any, any>;\r\n    private xmlDomUtility: XmlDomUtility;\r\n    public replacableTokenValues = { \"APOS_CHARACTER_TOKEN\": \"'\" };\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"86c20d35cc21447b3aa9bb2db79ffa84e895499f"},"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/utility.ts":{"path":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/utility.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":72}},"10":{"start":{"line":12,"column":4},"end":{"line":12,"column":21}},"11":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"13":{"start":{"line":15,"column":31},"end":{"line":15,"column":42}},"14":{"start":{"line":16,"column":17},"end":{"line":16,"column":19}},"15":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"16":{"start":{"line":17,"column":21},"end":{"line":17,"column":141}},"17":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"18":{"start":{"line":17,"column":109},"end":{"line":17,"column":141}},"19":{"start":{"line":18,"column":4},"end":{"line":18,"column":36}},"20":{"start":{"line":19,"column":4},"end":{"line":19,"column":18}},"21":{"start":{"line":21,"column":0},"end":{"line":21,"column":62}},"22":{"start":{"line":22,"column":0},"end":{"line":22,"column":27}},"23":{"start":{"line":23,"column":13},"end":{"line":23,"column":37}},"24":{"start":{"line":24,"column":11},"end":{"line":24,"column":38}},"25":{"start":{"line":25,"column":18},"end":{"line":25,"column":52}},"26":{"start":{"line":26,"column":11},"end":{"line":26,"column":24}},"27":{"start":{"line":27,"column":13},"end":{"line":27,"column":28}},"28":{"start":{"line":29,"column":4},"end":{"line":29,"column":60}},"29":{"start":{"line":31,"column":4},"end":{"line":72,"column":5}},"30":{"start":{"line":33,"column":8},"end":{"line":39,"column":9}},"31":{"start":{"line":34,"column":12},"end":{"line":34,"column":35}},"32":{"start":{"line":37,"column":12},"end":{"line":37,"column":88}},"33":{"start":{"line":38,"column":12},"end":{"line":38,"column":22}},"34":{"start":{"line":42,"column":8},"end":{"line":42,"column":69}},"35":{"start":{"line":43,"column":33},"end":{"line":51,"column":9}},"36":{"start":{"line":44,"column":22},"end":{"line":44,"column":38}},"37":{"start":{"line":45,"column":32},"end":{"line":45,"column":48}},"38":{"start":{"line":46,"column":12},"end":{"line":49,"column":13}},"39":{"start":{"line":47,"column":16},"end":{"line":48,"column":65}},"40":{"start":{"line":50,"column":12},"end":{"line":50,"column":23}},"41":{"start":{"line":53,"column":8},"end":{"line":53,"column":57}},"42":{"start":{"line":55,"column":18},"end":{"line":55,"column":46}},"43":{"start":{"line":56,"column":8},"end":{"line":56,"column":54}},"44":{"start":{"line":57,"column":25},"end":{"line":57,"column":47}},"45":{"start":{"line":58,"column":27},"end":{"line":58,"column":51}},"46":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"47":{"start":{"line":60,"column":12},"end":{"line":60,"column":38}},"48":{"start":{"line":62,"column":8},"end":{"line":62,"column":53}},"49":{"start":{"line":64,"column":23},"end":{"line":64,"column":41}},"50":{"start":{"line":66,"column":8},"end":{"line":66,"column":106}},"51":{"start":{"line":68,"column":8},"end":{"line":71,"column":9}},"52":{"start":{"line":69,"column":12},"end":{"line":69,"column":88}},"53":{"start":{"line":70,"column":12},"end":{"line":70,"column":22}},"54":{"start":{"line":73,"column":4},"end":{"line":73,"column":21}},"55":{"start":{"line":75,"column":0},"end":{"line":75,"column":30}},"56":{"start":{"line":78,"column":8},"end":{"line":78,"column":25}},"57":{"start":{"line":79,"column":8},"end":{"line":79,"column":27}},"58":{"start":{"line":83,"column":4},"end":{"line":86,"column":5}},"59":{"start":{"line":84,"column":8},"end":{"line":84,"column":40}},"60":{"start":{"line":85,"column":8},"end":{"line":85,"column":18}},"61":{"start":{"line":89,"column":4},"end":{"line":89,"column":40}},"62":{"start":{"line":91,"column":4},"end":{"line":91,"column":42}},"63":{"start":{"line":93,"column":4},"end":{"line":102,"column":5}},"64":{"start":{"line":94,"column":8},"end":{"line":94,"column":31}},"65":{"start":{"line":97,"column":8},"end":{"line":100,"column":9}},"66":{"start":{"line":98,"column":12},"end":{"line":98,"column":36}},"67":{"start":{"line":99,"column":12},"end":{"line":99,"column":22}},"68":{"start":{"line":101,"column":8},"end":{"line":101,"column":18}},"69":{"start":{"line":103,"column":4},"end":{"line":139,"column":5}},"70":{"start":{"line":104,"column":21},"end":{"line":104,"column":23}},"71":{"start":{"line":106,"column":20},"end":{"line":106,"column":48}},"72":{"start":{"line":107,"column":29},"end":{"line":107,"column":31}},"73":{"start":{"line":108,"column":8},"end":{"line":133,"column":9}},"74":{"start":{"line":110,"column":23},"end":{"line":110,"column":34}},"75":{"start":{"line":111,"column":12},"end":{"line":111,"column":35}},"76":{"start":{"line":118,"column":12},"end":{"line":118,"column":44}},"77":{"start":{"line":120,"column":12},"end":{"line":132,"column":13}},"78":{"start":{"line":121,"column":16},"end":{"line":121,"column":57}},"79":{"start":{"line":123,"column":33},"end":{"line":123,"column":47}},"80":{"start":{"line":124,"column":33},"end":{"line":125,"column":99}},"81":{"start":{"line":125,"column":40},"end":{"line":125,"column":98}},"82":{"start":{"line":126,"column":16},"end":{"line":128,"column":17}},"83":{"start":{"line":126,"column":29},"end":{"line":126,"column":50}},"84":{"start":{"line":127,"column":20},"end":{"line":127,"column":46}},"85":{"start":{"line":131,"column":16},"end":{"line":131,"column":52}},"86":{"start":{"line":134,"column":8},"end":{"line":134,"column":47}},"87":{"start":{"line":135,"column":8},"end":{"line":135,"column":22}},"88":{"start":{"line":138,"column":8},"end":{"line":138,"column":70}},"89":{"start":{"line":142,"column":4},"end":{"line":154,"column":6}},"90":{"start":{"line":157,"column":4},"end":{"line":169,"column":6}},"91":{"start":{"line":173,"column":4},"end":{"line":173,"column":48}},"92":{"start":{"line":174,"column":4},"end":{"line":174,"column":51}},"93":{"start":{"line":176,"column":4},"end":{"line":178,"column":5}},"94":{"start":{"line":177,"column":8},"end":{"line":177,"column":30}},"95":{"start":{"line":180,"column":14},"end":{"line":180,"column":16}},"96":{"start":{"line":181,"column":26},"end":{"line":181,"column":33}},"97":{"start":{"line":182,"column":4},"end":{"line":270,"column":5}},"98":{"start":{"line":183,"column":8},"end":{"line":183,"column":44}},"99":{"start":{"line":185,"column":8},"end":{"line":185,"column":41}},"100":{"start":{"line":186,"column":8},"end":{"line":189,"column":9}},"101":{"start":{"line":187,"column":12},"end":{"line":187,"column":49}},"102":{"start":{"line":188,"column":12},"end":{"line":188,"column":21}},"103":{"start":{"line":191,"column":22},"end":{"line":191,"column":56}},"104":{"start":{"line":193,"column":8},"end":{"line":196,"column":9}},"105":{"start":{"line":194,"column":12},"end":{"line":194,"column":43}},"106":{"start":{"line":195,"column":12},"end":{"line":195,"column":21}},"107":{"start":{"line":198,"column":8},"end":{"line":198,"column":33}},"108":{"start":{"line":200,"column":26},"end":{"line":200,"column":27}},"109":{"start":{"line":201,"column":8},"end":{"line":209,"column":9}},"110":{"start":{"line":202,"column":12},"end":{"line":204,"column":13}},"111":{"start":{"line":203,"column":16},"end":{"line":203,"column":30}},"112":{"start":{"line":205,"column":12},"end":{"line":205,"column":53}},"113":{"start":{"line":206,"column":12},"end":{"line":208,"column":13}},"114":{"start":{"line":207,"column":16},"end":{"line":207,"column":73}},"115":{"start":{"line":210,"column":31},"end":{"line":212,"column":56}},"116":{"start":{"line":214,"column":8},"end":{"line":214,"column":32}},"117":{"start":{"line":215,"column":8},"end":{"line":215,"column":35}},"118":{"start":{"line":218,"column":26},"end":{"line":218,"column":33}},"119":{"start":{"line":219,"column":8},"end":{"line":228,"column":9}},"120":{"start":{"line":220,"column":12},"end":{"line":220,"column":33}},"121":{"start":{"line":225,"column":12},"end":{"line":225,"column":43}},"122":{"start":{"line":226,"column":35},"end":{"line":226,"column":102}},"123":{"start":{"line":227,"column":12},"end":{"line":227,"column":63}},"124":{"start":{"line":230,"column":8},"end":{"line":230,"column":31}},"125":{"start":{"line":231,"column":8},"end":{"line":269,"column":9}},"126":{"start":{"line":232,"column":12},"end":{"line":234,"column":13}},"127":{"start":{"line":233,"column":16},"end":{"line":233,"column":52}},"128":{"start":{"line":236,"column":12},"end":{"line":236,"column":45}},"129":{"start":{"line":237,"column":12},"end":{"line":240,"column":13}},"130":{"start":{"line":238,"column":16},"end":{"line":238,"column":53}},"131":{"start":{"line":239,"column":16},"end":{"line":239,"column":25}},"132":{"start":{"line":242,"column":12},"end":{"line":248,"column":13}},"133":{"start":{"line":246,"column":16},"end":{"line":246,"column":61}},"134":{"start":{"line":247,"column":16},"end":{"line":247,"column":59}},"135":{"start":{"line":249,"column":12},"end":{"line":268,"column":13}},"136":{"start":{"line":251,"column":16},"end":{"line":251,"column":77}},"137":{"start":{"line":252,"column":35},"end":{"line":252,"column":74}},"138":{"start":{"line":253,"column":16},"end":{"line":253,"column":61}},"139":{"start":{"line":255,"column":16},"end":{"line":257,"column":17}},"140":{"start":{"line":256,"column":20},"end":{"line":256,"column":44}},"141":{"start":{"line":261,"column":16},"end":{"line":261,"column":77}},"142":{"start":{"line":262,"column":35},"end":{"line":262,"column":74}},"143":{"start":{"line":263,"column":16},"end":{"line":263,"column":61}},"144":{"start":{"line":265,"column":16},"end":{"line":267,"column":17}},"145":{"start":{"line":266,"column":20},"end":{"line":266,"column":44}},"146":{"start":{"line":272,"column":17},"end":{"line":272,"column":64}},"147":{"start":{"line":272,"column":39},"end":{"line":272,"column":63}},"148":{"start":{"line":273,"column":4},"end":{"line":273,"column":49}},"149":{"start":{"line":274,"column":4},"end":{"line":274,"column":18}},"150":{"start":{"line":277,"column":4},"end":{"line":279,"column":5}},"151":{"start":{"line":278,"column":8},"end":{"line":278,"column":75}},"152":{"start":{"line":280,"column":4},"end":{"line":282,"column":5}},"153":{"start":{"line":281,"column":8},"end":{"line":281,"column":72}},"154":{"start":{"line":283,"column":4},"end":{"line":285,"column":5}},"155":{"start":{"line":284,"column":8},"end":{"line":284,"column":17}},"156":{"start":{"line":286,"column":4},"end":{"line":288,"column":5}},"157":{"start":{"line":287,"column":8},"end":{"line":287,"column":24}},"158":{"start":{"line":290,"column":4},"end":{"line":295,"column":5}},"159":{"start":{"line":294,"column":8},"end":{"line":294,"column":25}},"160":{"start":{"line":296,"column":4},"end":{"line":296,"column":20}},"161":{"start":{"line":299,"column":4},"end":{"line":299,"column":31}},"162":{"start":{"line":300,"column":4},"end":{"line":302,"column":5}},"163":{"start":{"line":301,"column":8},"end":{"line":301,"column":68}},"164":{"start":{"line":303,"column":4},"end":{"line":306,"column":5}},"165":{"start":{"line":304,"column":8},"end":{"line":305,"column":31}},"166":{"start":{"line":307,"column":4},"end":{"line":307,"column":30}},"167":{"start":{"line":310,"column":4},"end":{"line":310,"column":47}},"168":{"start":{"line":313,"column":4},"end":{"line":313,"column":41}},"169":{"start":{"line":316,"column":4},"end":{"line":316,"column":16}},"170":{"start":{"line":317,"column":4},"end":{"line":323,"column":5}},"171":{"start":{"line":319,"column":8},"end":{"line":319,"column":35}},"172":{"start":{"line":321,"column":20},"end":{"line":321,"column":41}},"173":{"start":{"line":322,"column":8},"end":{"line":322,"column":63}},"174":{"start":{"line":325,"column":4},"end":{"line":325,"column":36}},"175":{"start":{"line":328,"column":16},"end":{"line":328,"column":21}},"176":{"start":{"line":329,"column":4},"end":{"line":339,"column":5}},"177":{"start":{"line":330,"column":8},"end":{"line":330,"column":54}},"178":{"start":{"line":333,"column":8},"end":{"line":338,"column":9}},"179":{"start":{"line":334,"column":12},"end":{"line":334,"column":26}},"180":{"start":{"line":337,"column":12},"end":{"line":337,"column":22}},"181":{"start":{"line":340,"column":4},"end":{"line":340,"column":17}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":80},"end":{"line":9,"column":81}},"loc":{"start":{"line":9,"column":95},"end":{"line":11,"column":1}},"line":9},"4":{"name":"(anonymous_4)","decl":{"start":{"line":11,"column":5},"end":{"line":11,"column":6}},"loc":{"start":{"line":11,"column":20},"end":{"line":13,"column":1}},"line":11},"5":{"name":"(anonymous_5)","decl":{"start":{"line":14,"column":50},"end":{"line":14,"column":51}},"loc":{"start":{"line":14,"column":65},"end":{"line":20,"column":1}},"line":14},"6":{"name":"findfiles","decl":{"start":{"line":28,"column":9},"end":{"line":28,"column":18}},"loc":{"start":{"line":28,"column":29},"end":{"line":74,"column":1}},"line":28},"7":{"name":"(anonymous_7)","decl":{"start":{"line":43,"column":33},"end":{"line":43,"column":34}},"loc":{"start":{"line":43,"column":48},"end":{"line":51,"column":9}},"line":43},"8":{"name":"(anonymous_8)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":29},"end":{"line":80,"column":5}},"line":77},"9":{"name":"find","decl":{"start":{"line":82,"column":9},"end":{"line":82,"column":13}},"loc":{"start":{"line":82,"column":24},"end":{"line":140,"column":1}},"line":82},"10":{"name":"(anonymous_10)","decl":{"start":{"line":125,"column":25},"end":{"line":125,"column":26}},"loc":{"start":{"line":125,"column":40},"end":{"line":125,"column":98}},"line":125},"11":{"name":"_getDefaultMatchOptions","decl":{"start":{"line":141,"column":9},"end":{"line":141,"column":32}},"loc":{"start":{"line":141,"column":35},"end":{"line":155,"column":1}},"line":141},"12":{"name":"cloneMatchOptions","decl":{"start":{"line":156,"column":9},"end":{"line":156,"column":26}},"loc":{"start":{"line":156,"column":41},"end":{"line":170,"column":1}},"line":156},"13":{"name":"match","decl":{"start":{"line":171,"column":9},"end":{"line":171,"column":14}},"loc":{"start":{"line":171,"column":53},"end":{"line":275,"column":1}},"line":171},"14":{"name":"(anonymous_14)","decl":{"start":{"line":272,"column":29},"end":{"line":272,"column":30}},"loc":{"start":{"line":272,"column":39},"end":{"line":272,"column":63}},"line":272},"15":{"name":"ensureRooted","decl":{"start":{"line":276,"column":9},"end":{"line":276,"column":21}},"loc":{"start":{"line":276,"column":31},"end":{"line":297,"column":1}},"line":276},"16":{"name":"isRooted","decl":{"start":{"line":298,"column":9},"end":{"line":298,"column":17}},"loc":{"start":{"line":298,"column":21},"end":{"line":308,"column":1}},"line":298},"17":{"name":"startsWith","decl":{"start":{"line":309,"column":9},"end":{"line":309,"column":19}},"loc":{"start":{"line":309,"column":32},"end":{"line":311,"column":1}},"line":309},"18":{"name":"endsWith","decl":{"start":{"line":312,"column":9},"end":{"line":312,"column":17}},"loc":{"start":{"line":312,"column":28},"end":{"line":314,"column":1}},"line":312},"19":{"name":"normalizeSeparators","decl":{"start":{"line":315,"column":9},"end":{"line":315,"column":28}},"loc":{"start":{"line":315,"column":32},"end":{"line":326,"column":1}},"line":315},"20":{"name":"exist","decl":{"start":{"line":327,"column":9},"end":{"line":327,"column":14}},"loc":{"start":{"line":327,"column":21},"end":{"line":341,"column":1}},"line":327}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"type":"binary-expr","locations":[{"start":{"line":9,"column":26},"end":{"line":9,"column":30}},{"start":{"line":9,"column":34},"end":{"line":9,"column":57}},{"start":{"line":9,"column":63},"end":{"line":13,"column":1}}],"line":9},"5":{"loc":{"start":{"line":9,"column":63},"end":{"line":13,"column":1}},"type":"cond-expr","locations":[{"start":{"line":9,"column":80},"end":{"line":11,"column":1}},{"start":{"line":11,"column":5},"end":{"line":13,"column":1}}],"line":9},"6":{"loc":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"type":"binary-expr","locations":[{"start":{"line":14,"column":20},"end":{"line":14,"column":24}},{"start":{"line":14,"column":28},"end":{"line":14,"column":45}},{"start":{"line":14,"column":50},"end":{"line":20,"column":1}}],"line":14},"7":{"loc":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},{"start":{"line":15,"column":4},"end":{"line":15,"column":42}}],"line":15},"8":{"loc":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"type":"binary-expr","locations":[{"start":{"line":15,"column":8},"end":{"line":15,"column":11}},{"start":{"line":15,"column":15},"end":{"line":15,"column":29}}],"line":15},"9":{"loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":141}},{"start":{"line":17,"column":4},"end":{"line":17,"column":141}}],"line":17},"10":{"loc":{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},"type":"if","locations":[{"start":{"line":17,"column":40},"end":{"line":17,"column":141}},{"start":{"line":17,"column":40},"end":{"line":17,"column":141}}],"line":17},"11":{"loc":{"start":{"line":17,"column":44},"end":{"line":17,"column":107}},"type":"binary-expr","locations":[{"start":{"line":17,"column":44},"end":{"line":17,"column":59}},{"start":{"line":17,"column":63},"end":{"line":17,"column":107}}],"line":17},"12":{"loc":{"start":{"line":31,"column":4},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":72,"column":5}},{"start":{"line":31,"column":4},"end":{"line":72,"column":5}}],"line":31},"13":{"loc":{"start":{"line":31,"column":8},"end":{"line":31,"column":66}},"type":"binary-expr","locations":[{"start":{"line":31,"column":8},"end":{"line":31,"column":35}},{"start":{"line":31,"column":39},"end":{"line":31,"column":66}}],"line":31},"14":{"loc":{"start":{"line":33,"column":8},"end":{"line":39,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":39,"column":9}},{"start":{"line":33,"column":8},"end":{"line":39,"column":9}}],"line":33},"15":{"loc":{"start":{"line":46,"column":12},"end":{"line":49,"column":13}},"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":49,"column":13}},{"start":{"line":46,"column":12},"end":{"line":49,"column":13}}],"line":46},"16":{"loc":{"start":{"line":47,"column":23},"end":{"line":48,"column":64}},"type":"cond-expr","locations":[{"start":{"line":48,"column":20},"end":{"line":48,"column":48}},{"start":{"line":48,"column":51},"end":{"line":48,"column":64}}],"line":47},"17":{"loc":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},{"start":{"line":59,"column":8},"end":{"line":61,"column":9}}],"line":59},"18":{"loc":{"start":{"line":59,"column":12},"end":{"line":59,"column":65}},"type":"binary-expr","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":37}},{"start":{"line":59,"column":41},"end":{"line":59,"column":65}}],"line":59},"19":{"loc":{"start":{"line":68,"column":8},"end":{"line":71,"column":9}},"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":71,"column":9}},{"start":{"line":68,"column":8},"end":{"line":71,"column":9}}],"line":68},"20":{"loc":{"start":{"line":68,"column":12},"end":{"line":68,"column":47}},"type":"binary-expr","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":22}},{"start":{"line":68,"column":26},"end":{"line":68,"column":47}}],"line":68},"21":{"loc":{"start":{"line":83,"column":4},"end":{"line":86,"column":5}},"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":86,"column":5}},{"start":{"line":83,"column":4},"end":{"line":86,"column":5}}],"line":83},"22":{"loc":{"start":{"line":97,"column":8},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":100,"column":9}},{"start":{"line":97,"column":8},"end":{"line":100,"column":9}}],"line":97},"23":{"loc":{"start":{"line":120,"column":12},"end":{"line":132,"column":13}},"type":"if","locations":[{"start":{"line":120,"column":12},"end":{"line":132,"column":13}},{"start":{"line":120,"column":12},"end":{"line":132,"column":13}}],"line":120},"24":{"loc":{"start":{"line":174,"column":14},"end":{"line":174,"column":50}},"type":"binary-expr","locations":[{"start":{"line":174,"column":14},"end":{"line":174,"column":21}},{"start":{"line":174,"column":25},"end":{"line":174,"column":50}}],"line":174},"25":{"loc":{"start":{"line":176,"column":4},"end":{"line":178,"column":5}},"type":"if","locations":[{"start":{"line":176,"column":4},"end":{"line":178,"column":5}},{"start":{"line":176,"column":4},"end":{"line":178,"column":5}}],"line":176},"26":{"loc":{"start":{"line":185,"column":19},"end":{"line":185,"column":32}},"type":"binary-expr","locations":[{"start":{"line":185,"column":19},"end":{"line":185,"column":26}},{"start":{"line":185,"column":30},"end":{"line":185,"column":32}}],"line":185},"27":{"loc":{"start":{"line":186,"column":8},"end":{"line":189,"column":9}},"type":"if","locations":[{"start":{"line":186,"column":8},"end":{"line":189,"column":9}},{"start":{"line":186,"column":8},"end":{"line":189,"column":9}}],"line":186},"28":{"loc":{"start":{"line":193,"column":8},"end":{"line":196,"column":9}},"type":"if","locations":[{"start":{"line":193,"column":8},"end":{"line":196,"column":9}},{"start":{"line":193,"column":8},"end":{"line":196,"column":9}}],"line":193},"29":{"loc":{"start":{"line":193,"column":12},"end":{"line":193,"column":58}},"type":"binary-expr","locations":[{"start":{"line":193,"column":12},"end":{"line":193,"column":30}},{"start":{"line":193,"column":34},"end":{"line":193,"column":58}}],"line":193},"30":{"loc":{"start":{"line":201,"column":8},"end":{"line":209,"column":9}},"type":"if","locations":[{"start":{"line":201,"column":8},"end":{"line":209,"column":9}},{"start":{"line":201,"column":8},"end":{"line":209,"column":9}}],"line":201},"31":{"loc":{"start":{"line":206,"column":12},"end":{"line":208,"column":13}},"type":"if","locations":[{"start":{"line":206,"column":12},"end":{"line":208,"column":13}},{"start":{"line":206,"column":12},"end":{"line":208,"column":13}}],"line":206},"32":{"loc":{"start":{"line":210,"column":31},"end":{"line":212,"column":56}},"type":"binary-expr","locations":[{"start":{"line":210,"column":31},"end":{"line":210,"column":47}},{"start":{"line":211,"column":13},"end":{"line":211,"column":33}},{"start":{"line":211,"column":37},"end":{"line":211,"column":56}},{"start":{"line":212,"column":13},"end":{"line":212,"column":33}},{"start":{"line":212,"column":37},"end":{"line":212,"column":55}}],"line":210},"33":{"loc":{"start":{"line":219,"column":8},"end":{"line":228,"column":9}},"type":"if","locations":[{"start":{"line":219,"column":8},"end":{"line":228,"column":9}},{"start":{"line":219,"column":8},"end":{"line":228,"column":9}}],"line":219},"34":{"loc":{"start":{"line":226,"column":35},"end":{"line":226,"column":102}},"type":"cond-expr","locations":[{"start":{"line":226,"column":65},"end":{"line":226,"column":92}},{"start":{"line":226,"column":95},"end":{"line":226,"column":102}}],"line":226},"35":{"loc":{"start":{"line":232,"column":12},"end":{"line":234,"column":13}},"type":"if","locations":[{"start":{"line":232,"column":12},"end":{"line":234,"column":13}},{"start":{"line":232,"column":12},"end":{"line":234,"column":13}}],"line":232},"36":{"loc":{"start":{"line":232,"column":16},"end":{"line":232,"column":62}},"type":"binary-expr","locations":[{"start":{"line":232,"column":16},"end":{"line":232,"column":36}},{"start":{"line":232,"column":40},"end":{"line":232,"column":62}}],"line":232},"37":{"loc":{"start":{"line":236,"column":23},"end":{"line":236,"column":36}},"type":"binary-expr","locations":[{"start":{"line":236,"column":23},"end":{"line":236,"column":30}},{"start":{"line":236,"column":34},"end":{"line":236,"column":36}}],"line":236},"38":{"loc":{"start":{"line":237,"column":12},"end":{"line":240,"column":13}},"type":"if","locations":[{"start":{"line":237,"column":12},"end":{"line":240,"column":13}},{"start":{"line":237,"column":12},"end":{"line":240,"column":13}}],"line":237},"39":{"loc":{"start":{"line":242,"column":12},"end":{"line":248,"column":13}},"type":"if","locations":[{"start":{"line":242,"column":12},"end":{"line":248,"column":13}},{"start":{"line":242,"column":12},"end":{"line":248,"column":13}}],"line":242},"40":{"loc":{"start":{"line":242,"column":16},"end":{"line":245,"column":127}},"type":"binary-expr","locations":[{"start":{"line":242,"column":16},"end":{"line":242,"column":27}},{"start":{"line":243,"column":16},"end":{"line":243,"column":34}},{"start":{"line":245,"column":17},"end":{"line":245,"column":35}},{"start":{"line":245,"column":39},"end":{"line":245,"column":126}}],"line":242},"41":{"loc":{"start":{"line":245,"column":40},"end":{"line":245,"column":107}},"type":"cond-expr","locations":[{"start":{"line":245,"column":70},"end":{"line":245,"column":97}},{"start":{"line":245,"column":100},"end":{"line":245,"column":107}}],"line":245},"42":{"loc":{"start":{"line":249,"column":12},"end":{"line":268,"column":13}},"type":"if","locations":[{"start":{"line":249,"column":12},"end":{"line":268,"column":13}},{"start":{"line":249,"column":12},"end":{"line":268,"column":13}}],"line":249},"43":{"loc":{"start":{"line":277,"column":4},"end":{"line":279,"column":5}},"type":"if","locations":[{"start":{"line":277,"column":4},"end":{"line":279,"column":5}},{"start":{"line":277,"column":4},"end":{"line":279,"column":5}}],"line":277},"44":{"loc":{"start":{"line":280,"column":4},"end":{"line":282,"column":5}},"type":"if","locations":[{"start":{"line":280,"column":4},"end":{"line":282,"column":5}},{"start":{"line":280,"column":4},"end":{"line":282,"column":5}}],"line":280},"45":{"loc":{"start":{"line":283,"column":4},"end":{"line":285,"column":5}},"type":"if","locations":[{"start":{"line":283,"column":4},"end":{"line":285,"column":5}},{"start":{"line":283,"column":4},"end":{"line":285,"column":5}}],"line":283},"46":{"loc":{"start":{"line":286,"column":4},"end":{"line":288,"column":5}},"type":"if","locations":[{"start":{"line":286,"column":4},"end":{"line":288,"column":5}},{"start":{"line":286,"column":4},"end":{"line":288,"column":5}}],"line":286},"47":{"loc":{"start":{"line":286,"column":8},"end":{"line":286,"column":62}},"type":"binary-expr","locations":[{"start":{"line":286,"column":8},"end":{"line":286,"column":35}},{"start":{"line":286,"column":39},"end":{"line":286,"column":62}}],"line":286},"48":{"loc":{"start":{"line":290,"column":4},"end":{"line":295,"column":5}},"type":"if","locations":[{"start":{"line":290,"column":4},"end":{"line":295,"column":5}},{"start":{"line":290,"column":4},"end":{"line":295,"column":5}}],"line":290},"49":{"loc":{"start":{"line":290,"column":8},"end":{"line":290,"column":84}},"type":"binary-expr","locations":[{"start":{"line":290,"column":8},"end":{"line":290,"column":27}},{"start":{"line":290,"column":32},"end":{"line":290,"column":59}},{"start":{"line":290,"column":63},"end":{"line":290,"column":83}}],"line":290},"50":{"loc":{"start":{"line":300,"column":4},"end":{"line":302,"column":5}},"type":"if","locations":[{"start":{"line":300,"column":4},"end":{"line":302,"column":5}},{"start":{"line":300,"column":4},"end":{"line":302,"column":5}}],"line":300},"51":{"loc":{"start":{"line":303,"column":4},"end":{"line":306,"column":5}},"type":"if","locations":[{"start":{"line":303,"column":4},"end":{"line":306,"column":5}},{"start":{"line":303,"column":4},"end":{"line":306,"column":5}}],"line":303},"52":{"loc":{"start":{"line":304,"column":15},"end":{"line":305,"column":30}},"type":"binary-expr","locations":[{"start":{"line":304,"column":15},"end":{"line":304,"column":34}},{"start":{"line":305,"column":12},"end":{"line":305,"column":30}}],"line":304},"53":{"loc":{"start":{"line":316,"column":8},"end":{"line":316,"column":15}},"type":"binary-expr","locations":[{"start":{"line":316,"column":8},"end":{"line":316,"column":9}},{"start":{"line":316,"column":13},"end":{"line":316,"column":15}}],"line":316},"54":{"loc":{"start":{"line":317,"column":4},"end":{"line":323,"column":5}},"type":"if","locations":[{"start":{"line":317,"column":4},"end":{"line":323,"column":5}},{"start":{"line":317,"column":4},"end":{"line":323,"column":5}}],"line":317},"55":{"loc":{"start":{"line":322,"column":16},"end":{"line":322,"column":33}},"type":"cond-expr","locations":[{"start":{"line":322,"column":24},"end":{"line":322,"column":28}},{"start":{"line":322,"column":31},"end":{"line":322,"column":33}}],"line":322},"56":{"loc":{"start":{"line":330,"column":19},"end":{"line":330,"column":52}},"type":"binary-expr","locations":[{"start":{"line":330,"column":19},"end":{"line":330,"column":23}},{"start":{"line":330,"column":27},"end":{"line":330,"column":52}}],"line":330},"57":{"loc":{"start":{"line":333,"column":8},"end":{"line":338,"column":9}},"type":"if","locations":[{"start":{"line":333,"column":8},"end":{"line":338,"column":9}},{"start":{"line":333,"column":8},"end":{"line":338,"column":9}}],"line":333},"58":{"loc":{"start":{"line":333,"column":12},"end":{"line":333,"column":40}},"type":"binary-expr","locations":[{"start":{"line":333,"column":12},"end":{"line":333,"column":15}},{"start":{"line":333,"column":19},"end":{"line":333,"column":40}}],"line":333}},"s":{"0":1,"1":31,"2":31,"3":31,"4":0,"5":0,"6":0,"7":0,"8":1,"9":2,"10":0,"11":1,"12":2,"13":0,"14":2,"15":2,"16":2,"17":31,"18":31,"19":2,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":5,"29":5,"30":5,"31":5,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":5,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":5,"176":5,"177":5,"178":0,"179":0,"180":0,"181":5},"f":{"0":31,"1":0,"2":0,"3":2,"4":0,"5":2,"6":5,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":5},"b":{"0":[1,1,1],"1":[1,0],"2":[31,0],"3":[0,0],"4":[1,1,1],"5":[1,0],"6":[1,1,1],"7":[0,2],"8":[2,2],"9":[2,0],"10":[31,0],"11":[31,31],"12":[5,0],"13":[5,5],"14":[5,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0,0,0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0,0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[5,5],"57":[0,0],"58":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/utility.ts","sources":["/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/utility.ts"],"names":[],"mappings":"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","sourcesContent":["import core = require(\"@actions/core\");\r\nimport * as os from 'os';\r\nimport * as minimatch from 'minimatch';\r\nimport fs = require('fs');\r\n\r\nimport path = require('path');\r\n\r\nexport function findfiles(filepath: string){\r\n\r\n    core.debug(\"Finding files matching input: \" + filepath);\r\n\r\n    let filesList : string [];\r\n    if (filepath.indexOf('*') == -1 && filepath.indexOf('?') == -1) {\r\n\r\n        // No pattern found, check literal path to a single file\r\n        if(exist(filepath)) {\r\n            filesList = [filepath];\r\n        }\r\n        else {\r\n            core.debug('No matching files were found with search pattern: ' + filepath);\r\n            return [];\r\n        }\r\n    } else {\r\n        filepath = path.join(process.env.GITHUB_WORKSPACE, filepath);\r\n        let firstWildcardIndex = function(str: string) {\r\n            let idx = str.indexOf('*');\r\n\r\n            let idxOfWildcard = str.indexOf('?');\r\n            if (idxOfWildcard > -1) {\r\n                return (idx > -1) ?\r\n                    Math.min(idx, idxOfWildcard) : idxOfWildcard;\r\n            }\r\n\r\n            return idx;\r\n        }\r\n\r\n        // Find app files matching the specified pattern\r\n        core.debug('Matching glob pattern: ' + filepath);\r\n\r\n        // First find the most complete path without any matching patterns\r\n        let idx = firstWildcardIndex(filepath);\r\n        core.debug('Index of first wildcard: ' + idx);\r\n        let slicedPath = filepath.slice(0, idx);\r\n        let findPathRoot = path.dirname(slicedPath);\r\n        if(slicedPath.endsWith(\"\\\\\") || slicedPath.endsWith(\"/\")){\r\n            findPathRoot = slicedPath;\r\n        }\r\n\r\n        core.debug('find root dir: ' + findPathRoot);\r\n\r\n        // Now we get a list of all files under this root\r\n        let allFiles = find(findPathRoot);\r\n\r\n        // Now matching the pattern against all files\r\n        filesList = match(allFiles, filepath, '', {matchBase: true, nocase: !!os.type().match(/^Win/) });\r\n\r\n        // Fail if no matching files were found\r\n        if (!filesList || filesList.length == 0) {\r\n            core.debug('No matching files were found with search pattern: ' + filepath);\r\n            return [];\r\n        }\r\n    }\r\n    return filesList;\r\n}\r\n\r\nclass _FindItem {\r\n    public path: string;\r\n    public level: number;\r\n\r\n    public constructor(path: string, level: number) {\r\n        this.path = path;\r\n        this.level = level;\r\n    }\r\n}\r\n\r\nfunction find(findPath: string): string[] {\r\n    if (!findPath) {\r\n        core.debug('no path specified');\r\n        return [];\r\n    }\r\n\r\n    // normalize the path, otherwise the first result is inconsistently formatted from the rest of the results\r\n    // because path.join() performs normalization.\r\n    findPath = path.normalize(findPath);\r\n\r\n    // debug trace the parameters\r\n    core.debug(`findPath: '${findPath}'`);\r\n\r\n    // return empty if not exists\r\n    try {\r\n        fs.lstatSync(findPath);\r\n    }\r\n    catch (err) {\r\n        if (err.code == 'ENOENT') {\r\n            core.debug('0 results')\r\n            return [];\r\n        }\r\n\r\n        throw err;\r\n    }\r\n\r\n    try {\r\n        let result: string[] = [];\r\n\r\n        // push the first item\r\n        let stack: _FindItem[] = [new _FindItem(findPath, 1)];\r\n        let traversalChain: string[] = []; // used to detect cycles\r\n\r\n        while (stack.length) {\r\n            // pop the next item and push to the result array\r\n            let item = stack.pop()!; // non-null because `stack.length` was truthy\r\n            result.push(item.path);\r\n\r\n            // stat the item.  the stat info is used further below to determine whether to traverse deeper\r\n            //\r\n            // stat returns info about the target of a symlink (or symlink chain),\r\n            // lstat returns info about a symlink itself\r\n            let stats: fs.Stats;\r\n            // use lstat (not following symlinks)\r\n            stats = fs.lstatSync(item.path);\r\n\r\n            // note, isDirectory() returns false for the lstat of a symlink\r\n            if (stats.isDirectory()) {\r\n                core.debug(`  ${item.path} (directory)`);\r\n\r\n                // push the child items in reverse onto the stack\r\n                let childLevel: number = item.level + 1;\r\n                let childItems: _FindItem[] =\r\n                    fs.readdirSync(item.path)\r\n                        .map((childName: string) => new _FindItem(path.join(item.path, childName), childLevel));\r\n                for (let i = childItems.length - 1; i >= 0; i--) {\r\n                    stack.push(childItems[i]);\r\n                }\r\n            }\r\n            else {\r\n                core.debug(`  ${item.path} (file)`);\r\n            }\r\n        }\r\n\r\n        core.debug(`${result.length} results`);\r\n        return result;\r\n    }\r\n    catch (err) {\r\n        throw new Error('LIB_OperationFailed' + 'find'+ err.message);\r\n    }\r\n}\r\n\r\ninterface MatchOptions {\r\n    debug?: boolean;\r\n    nobrace?: boolean;\r\n    noglobstar?: boolean;\r\n    dot?: boolean;\r\n    noext?: boolean;\r\n    nocase?: boolean;\r\n    nonull?: boolean;\r\n    matchBase?: boolean;\r\n    nocomment?: boolean;\r\n    nonegate?: boolean;\r\n    flipNegate?: boolean;\r\n}\r\n\r\nfunction _getDefaultMatchOptions(): MatchOptions {\r\n    return <MatchOptions>{\r\n        debug: false,\r\n        nobrace: true,\r\n        noglobstar: false,\r\n        dot: true,\r\n        noext: false,\r\n        nocase: process.platform == 'win32',\r\n        nonull: false,\r\n        matchBase: false,\r\n        nocomment: false,\r\n        nonegate: false,\r\n        flipNegate: false\r\n    };\r\n}\r\n\r\nfunction cloneMatchOptions(matchOptions: MatchOptions): MatchOptions {\r\n    return <MatchOptions>{\r\n        debug: matchOptions.debug,\r\n        nobrace: matchOptions.nobrace,\r\n        noglobstar: matchOptions.noglobstar,\r\n        dot: matchOptions.dot,\r\n        noext: matchOptions.noext,\r\n        nocase: matchOptions.nocase,\r\n        nonull: matchOptions.nonull,\r\n        matchBase: matchOptions.matchBase,\r\n        nocomment: matchOptions.nocomment,\r\n        nonegate: matchOptions.nonegate,\r\n        flipNegate: matchOptions.flipNegate\r\n    };\r\n}\r\n\r\nfunction match(list: string[], patterns: string[] | string, patternRoot?: string, options?: MatchOptions): string[] {\r\n    // trace parameters\r\n    core.debug(`patternRoot: '${patternRoot}'`);\r\n    options = options || _getDefaultMatchOptions(); // default match options\r\n\r\n    // convert pattern to an array\r\n    if (typeof patterns == 'string') {\r\n        patterns = [patterns as string];\r\n    }\r\n\r\n    // hashtable to keep track of matches\r\n    let map: { [item: string]: boolean } = {};\r\n\r\n    let originalOptions = options;\r\n    for (let pattern of patterns) {\r\n        core.debug(`pattern: '${pattern}'`);\r\n\r\n        // trim and skip empty\r\n        pattern = (pattern || '').trim();\r\n        if (!pattern) {\r\n            core.debug('skipping empty pattern');\r\n            continue;\r\n        }\r\n\r\n        // clone match options\r\n        let options = cloneMatchOptions(originalOptions);\r\n\r\n        // skip comments\r\n        if (!options.nocomment && startsWith(pattern, '#')) {\r\n            core.debug('skipping comment');\r\n            continue;\r\n        }\r\n\r\n        // set nocomment - brace expansion could result in a leading '#'\r\n        options.nocomment = true;\r\n\r\n        // determine whether pattern is include or exclude\r\n        let negateCount = 0;\r\n        if (!options.nonegate) {\r\n            while (pattern.charAt(negateCount) == '!') {\r\n                negateCount++;\r\n            }\r\n\r\n            pattern = pattern.substring(negateCount); // trim leading '!'\r\n            if (negateCount) {\r\n                core.debug(`trimmed leading '!'. pattern: '${pattern}'`);\r\n            }\r\n        }\r\n\r\n        let isIncludePattern = negateCount == 0 ||\r\n            (negateCount % 2 == 0 && !options.flipNegate) ||\r\n            (negateCount % 2 == 1 && options.flipNegate);\r\n\r\n        // set nonegate - brace expansion could result in a leading '!'\r\n        options.nonegate = true;\r\n        options.flipNegate = false;\r\n\r\n        // expand braces - required to accurately root patterns\r\n        let expanded: string[];\r\n        let preExpanded: string = pattern;\r\n        if (options.nobrace) {\r\n            expanded = [pattern];\r\n        }\r\n        else {\r\n            // convert slashes on Windows before calling braceExpand(). unfortunately this means braces cannot\r\n            // be escaped on Windows, this limitation is consistent with current limitations of minimatch (3.0.3).\r\n            core.debug('expanding braces');\r\n            let convertedPattern = process.platform == 'win32' ? pattern.replace(/\\\\/g, '/') : pattern;\r\n            expanded = (minimatch as any).braceExpand(convertedPattern);\r\n        }\r\n\r\n        // set nobrace\r\n        options.nobrace = true;\r\n\r\n        for (let pattern of expanded) {\r\n            if (expanded.length != 1 || pattern != preExpanded) {\r\n                core.debug(`pattern: '${pattern}'`);\r\n            }\r\n\r\n            // trim and skip empty\r\n            pattern = (pattern || '').trim();\r\n            if (!pattern) {\r\n                core.debug('skipping empty pattern');\r\n                continue;\r\n            }\r\n\r\n            // root the pattern when all of the following conditions are true:\r\n            if (patternRoot &&          // patternRoot supplied\r\n                !isRooted(pattern) &&  // AND pattern not rooted\r\n                // AND matchBase:false or not basename only\r\n                (!options.matchBase || (process.platform == 'win32' ? pattern.replace(/\\\\/g, '/') : pattern).indexOf('/') >= 0)) {\r\n\r\n                pattern = ensureRooted(patternRoot, pattern);\r\n                core.debug(`rooted pattern: '${pattern}'`);\r\n            }\r\n\r\n            if (isIncludePattern) {\r\n                // apply the pattern\r\n                core.debug('applying include pattern against original list');\r\n                let matchResults: string[] = minimatch.match(list, pattern, options);\r\n                core.debug(matchResults.length + ' matches');\r\n\r\n                // union the results\r\n                for (let matchResult of matchResults) {\r\n                    map[matchResult] = true;\r\n                }\r\n            }\r\n            else {\r\n                // apply the pattern\r\n                core.debug('applying exclude pattern against original list');\r\n                let matchResults: string[] = minimatch.match(list, pattern, options);\r\n                core.debug(matchResults.length + ' matches');\r\n\r\n                // substract the results\r\n                for (let matchResult of matchResults) {\r\n                    delete map[matchResult];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // return a filtered version of the original list (preserves order and prevents duplication)\r\n    let result: string[] = list.filter((item: string) => map.hasOwnProperty(item));\r\n    core.debug(result.length + ' final results');\r\n    return result;\r\n}\r\n\r\nfunction ensureRooted(root: string, p: string) {\r\n    if (!root) {\r\n        throw new Error('ensureRooted() parameter \"root\" cannot be empty');\r\n    }\r\n\r\n    if (!p) {\r\n        throw new Error('ensureRooted() parameter \"p\" cannot be empty');\r\n    }\r\n\r\n    if (isRooted(p)) {\r\n        return p;\r\n    }\r\n\r\n    if (process.platform == 'win32' && root.match(/^[A-Z]:$/i)) { // e.g. C:\r\n        return root + p;\r\n    }\r\n\r\n    // ensure root ends with a separator\r\n    if (endsWith(root, '/') || (process.platform == 'win32' && endsWith(root, '\\\\'))) {\r\n        // root already ends with a separator\r\n    }\r\n    else {\r\n        root += path.sep; // append separator\r\n    }\r\n\r\n    return root + p;\r\n}\r\n\r\nfunction isRooted(p: string): boolean {\r\n    p = normalizeSeparators(p);\r\n    if (!p) {\r\n        throw new Error('isRooted() parameter \"p\" cannot be empty');\r\n    }\r\n\r\n    if (process.platform == 'win32') {\r\n        return startsWith(p, '\\\\') || // e.g. \\ or \\hello or \\\\hello\r\n            /^[A-Z]:/i.test(p);      // e.g. C: or C:\\hello\r\n    }\r\n\r\n    return startsWith(p, '/'); // e.g. /hello\r\n}\r\n\r\nfunction startsWith(str: string, start: string): boolean {\r\n    return str.slice(0, start.length) == start;\r\n}\r\n\r\nfunction endsWith(str: string, end: string): boolean {\r\n    return str.slice(-end.length) == end;\r\n}\r\n\r\nfunction normalizeSeparators(p: string): string {\r\n    p = p || '';\r\n    if (process.platform == 'win32') {\r\n        // convert slashes on Windows\r\n        p = p.replace(/\\//g, '\\\\');\r\n\r\n        // remove redundant slashes\r\n        let isUnc = /^\\\\\\\\+[^\\\\]/.test(p); // e.g. \\\\hello\r\n        return (isUnc ? '\\\\' : '') + p.replace(/\\\\\\\\+/g, '\\\\'); // preserve leading // for UNC\r\n    }\r\n\r\n    // remove redundant slashes\r\n    return p.replace(/\\/\\/+/g, '/');\r\n}\r\n\r\nfunction exist(path: string): boolean {\r\n    let exist = false;\r\n    try {\r\n        exist = !!(path && fs.statSync(path) != null);\r\n    } catch (err) {\r\n        if (err && err.code === 'ENOENT') {\r\n            exist = false;\r\n        } else {\r\n            throw err;\r\n        }\r\n    }\r\n    return exist;\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"00de70c8cd285cb1ad2afa21014b69e62cebee61"},"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/fileEncodingUtility.ts":{"path":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/fileEncodingUtility.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":13},"end":{"line":4,"column":37}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":4},"end":{"line":27,"column":5}},"5":{"start":{"line":8,"column":8},"end":{"line":11,"column":10}},"6":{"start":{"line":13,"column":9},"end":{"line":27,"column":5}},"7":{"start":{"line":14,"column":8},"end":{"line":14,"column":195}},"8":{"start":{"line":16,"column":9},"end":{"line":27,"column":5}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":195}},"10":{"start":{"line":19,"column":9},"end":{"line":27,"column":5}},"11":{"start":{"line":20,"column":8},"end":{"line":23,"column":10}},"12":{"start":{"line":25,"column":9},"end":{"line":27,"column":5}},"13":{"start":{"line":26,"column":8},"end":{"line":26,"column":195}},"14":{"start":{"line":28,"column":4},"end":{"line":28,"column":59}},"15":{"start":{"line":29,"column":4},"end":{"line":29,"column":16}},"16":{"start":{"line":32,"column":4},"end":{"line":32,"column":54}},"17":{"start":{"line":33,"column":19},"end":{"line":33,"column":20}},"18":{"start":{"line":34,"column":4},"end":{"line":37,"column":5}},"19":{"start":{"line":34,"column":21},"end":{"line":34,"column":22}},"20":{"start":{"line":35,"column":8},"end":{"line":35,"column":33}},"21":{"start":{"line":36,"column":8},"end":{"line":36,"column":58}},"22":{"start":{"line":38,"column":4},"end":{"line":57,"column":5}},"23":{"start":{"line":40,"column":12},"end":{"line":40,"column":200}},"24":{"start":{"line":42,"column":12},"end":{"line":42,"column":200}},"25":{"start":{"line":44,"column":12},"end":{"line":44,"column":200}},"26":{"start":{"line":46,"column":12},"end":{"line":49,"column":14}},"27":{"start":{"line":51,"column":12},"end":{"line":54,"column":14}},"28":{"start":{"line":56,"column":12},"end":{"line":56,"column":147}},"29":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"30":{"start":{"line":61,"column":8},"end":{"line":61,"column":86}},"31":{"start":{"line":63,"column":23},"end":{"line":63,"column":116}},"32":{"start":{"line":64,"column":4},"end":{"line":64,"column":24}},"33":{"start":{"line":66,"column":0},"end":{"line":66,"column":48}}},"fnMap":{"0":{"name":"detectFileEncodingWithBOM","decl":{"start":{"line":5,"column":9},"end":{"line":5,"column":34}},"loc":{"start":{"line":5,"column":53},"end":{"line":30,"column":1}},"line":5},"1":{"name":"detectFileEncodingWithoutBOM","decl":{"start":{"line":31,"column":9},"end":{"line":31,"column":37}},"loc":{"start":{"line":31,"column":56},"end":{"line":58,"column":1}},"line":31},"2":{"name":"detectFileEncoding","decl":{"start":{"line":59,"column":9},"end":{"line":59,"column":27}},"loc":{"start":{"line":59,"column":46},"end":{"line":65,"column":1}},"line":59}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":27,"column":5}},{"start":{"line":7,"column":4},"end":{"line":27,"column":5}}],"line":7},"1":{"loc":{"start":{"line":13,"column":9},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":13,"column":9},"end":{"line":27,"column":5}},{"start":{"line":13,"column":9},"end":{"line":27,"column":5}}],"line":13},"2":{"loc":{"start":{"line":16,"column":9},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":16,"column":9},"end":{"line":27,"column":5}},{"start":{"line":16,"column":9},"end":{"line":27,"column":5}}],"line":16},"3":{"loc":{"start":{"line":19,"column":9},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":19,"column":9},"end":{"line":27,"column":5}},{"start":{"line":19,"column":9},"end":{"line":27,"column":5}}],"line":19},"4":{"loc":{"start":{"line":25,"column":9},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":25,"column":9},"end":{"line":27,"column":5}},{"start":{"line":25,"column":9},"end":{"line":27,"column":5}}],"line":25},"5":{"loc":{"start":{"line":36,"column":31},"end":{"line":36,"column":56}},"type":"cond-expr","locations":[{"start":{"line":36,"column":51},"end":{"line":36,"column":52}},{"start":{"line":36,"column":55},"end":{"line":36,"column":56}}],"line":36},"6":{"loc":{"start":{"line":38,"column":4},"end":{"line":57,"column":5}},"type":"switch","locations":[{"start":{"line":39,"column":8},"end":{"line":40,"column":200}},{"start":{"line":41,"column":8},"end":{"line":42,"column":200}},{"start":{"line":43,"column":8},"end":{"line":44,"column":200}},{"start":{"line":45,"column":8},"end":{"line":49,"column":14}},{"start":{"line":50,"column":8},"end":{"line":54,"column":14}},{"start":{"line":55,"column":8},"end":{"line":56,"column":147}}],"line":38},"7":{"loc":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},{"start":{"line":60,"column":4},"end":{"line":62,"column":5}}],"line":60},"8":{"loc":{"start":{"line":63,"column":23},"end":{"line":63,"column":116}},"type":"binary-expr","locations":[{"start":{"line":63,"column":23},"end":{"line":63,"column":66}},{"start":{"line":63,"column":70},"end":{"line":63,"column":116}}],"line":63}},"s":{"0":1,"1":1,"2":1,"3":5,"4":5,"5":1,"6":4,"7":0,"8":4,"9":0,"10":4,"11":0,"12":4,"13":0,"14":4,"15":4,"16":4,"17":4,"18":4,"19":4,"20":16,"21":16,"22":4,"23":0,"24":0,"25":0,"26":0,"27":4,"28":0,"29":5,"30":0,"31":5,"32":5,"33":1},"f":{"0":5,"1":4,"2":5},"b":{"0":[1,4],"1":[0,4],"2":[0,4],"3":[0,4],"4":[0,4],"5":[16,0],"6":[0,0,0,0,4,0],"7":[0,5],"8":[5,4]},"inputSourceMap":{"version":3,"file":"/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/fileEncodingUtility.ts","sources":["/Users/tomkandula/Downloads/Projects/Tokan/__NotDeployed/Microsoft/variable-substitution/src/operations/fileEncodingUtility.ts"],"names":[],"mappings":"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","sourcesContent":["import core = require(\"@actions/core\");\r\n\r\nexport interface fileEncoding {\r\n    encoding: string,\r\n    withBOM: boolean\r\n}\r\n\r\nfunction detectFileEncodingWithBOM(fileName: string, buffer: Buffer): fileEncoding {\r\n    core.debug('Detecting file encoding using BOM');\r\n    if(buffer.slice(0,3).equals(Buffer.from([239, 187, 191]))) {\r\n        return {\r\n            encoding: 'utf-8', \r\n            withBOM: true\r\n        };\r\n    }\r\n    else if(buffer.slice(0,4).equals(Buffer.from([255, 254, 0, 0]))) {\r\n        throw Error(`Detected file encoding of the file ${fileName} as UTF-32LE. Variable substitution is not supported with file encoding UTF-32LE. Supported encodings are UTF-8 and UTF-16LE.`);\r\n    }\r\n    else if(buffer.slice(0,2).equals(Buffer.from([254, 255]))) {\r\n        throw Error(`Detected file encoding of the file ${fileName} as UTF-32BE. Variable substitution is not supported with file encoding UTF-32BE. Supported encodings are UTF-8 and UTF-16LE.`);\r\n    }\r\n    else if(buffer.slice(0,2).equals(Buffer.from([255, 254]))) {\r\n        return {\r\n            encoding: 'utf-16le', \r\n            withBOM: true\r\n        };\r\n    }\r\n    else if(buffer.slice(0,4).equals(Buffer.from([0, 0, 254, 255]))) {\r\n        throw Error(`Detected file encoding of the file ${fileName} as UTF-32BE. Variable substitution is not supported with file encoding UTF-32BE. Supported encodings are UTF-8 and UTF-16LE.`);\r\n    }\r\n    core.debug('Unable to detect File encoding using BOM');\r\n    return null;\r\n}\r\n\r\nfunction detectFileEncodingWithoutBOM(fileName: string, buffer: Buffer): fileEncoding {\r\n    core.debug('Detecting file encoding without BOM');\r\n    let typeCode = 0;\r\n    for(let index = 0; index < 4; index++) {\r\n        typeCode = typeCode << 1;\r\n        typeCode = typeCode | (buffer[index] > 0 ? 1 : 0);\r\n    }\r\n    switch(typeCode) {\r\n        case 1:\r\n            throw Error(`Detected file encoding of the file ${fileName} as UTF-32BE. Variable substitution is not supported with file encoding UTF-32BE. Supported encodings are UTF-8 and UTF-16 LE.`);\r\n        case 5:\r\n            throw Error(`Detected file encoding of the file ${fileName} as UTF-16BE. Variable substitution is not supported with file encoding UTF-16BE. Supported encodings are UTF-8 and UTF-16 LE.`);\r\n        case 8:\r\n            throw Error(`Detected file encoding of the file ${fileName} as UTF-32LE. Variable substitution is not supported with file encoding UTF-32LE. Supported encodings are UTF-8 and UTF-16 LE.`);\r\n        case 10:\r\n            return {\r\n                encoding: 'utf-16le',\r\n                withBOM: false\r\n            };\r\n        case 15:\r\n            return {\r\n                encoding: 'utf-8', \r\n                withBOM: false\r\n            };\r\n        default:\r\n            throw Error(`Unable to detect encoding of the file ${fileName} (typeCode: ${typeCode}). Supported encodings are UTF-8 and UTF-16 LE.`);\r\n    }\r\n}\r\n\r\nexport function detectFileEncoding(fileName: string, buffer: Buffer): fileEncoding {\r\n    if(buffer.length < 4) {\r\n        throw Error(`File buffer is too short to detect encoding type : ${fileName}`);\r\n    }\r\n    let fileEncoding = detectFileEncodingWithBOM(fileName, buffer) || detectFileEncodingWithoutBOM(fileName, buffer);\r\n    return fileEncoding;\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"85dc28796e927765c90bee61bee29a4906a5449d"}}